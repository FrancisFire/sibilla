/*
 * generated by Xtext 2.18.0.M3
 */
grammar InternalModel;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package quasylab.sibilla.lang.pm.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package quasylab.sibilla.lang.pm.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import quasylab.sibilla.lang.pm.services.ModelGrammarAccess;

}

@parser::members {

 	private ModelGrammarAccess grammarAccess;

    public InternalModelParser(TokenStream input, ModelGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected ModelGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getElementsElementParserRuleCall_0());
			}
			lv_elements_0_0=ruleElement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"elements",
					lv_elements_0_0,
					"quasylab.sibilla.lang.pm.Model.Element");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	iv_ruleElement=ruleElement
	{ $current=$iv_ruleElement.current; }
	EOF;

// Rule Element
ruleElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getElementAccess().getSpeciesDeclarationParserRuleCall_0());
		}
		this_SpeciesDeclaration_0=ruleSpeciesDeclaration
		{
			$current = $this_SpeciesDeclaration_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getRuleParserRuleCall_1());
		}
		this_Rule_1=ruleRule
		{
			$current = $this_Rule_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getConstantParserRuleCall_2());
		}
		this_Constant_2=ruleConstant
		{
			$current = $this_Constant_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getMacroParserRuleCall_3());
		}
		this_Macro_3=ruleMacro
		{
			$current = $this_Macro_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getSystemParserRuleCall_4());
		}
		this_System_4=ruleSystem
		{
			$current = $this_System_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getMeasureParserRuleCall_5());
		}
		this_Measure_5=ruleMeasure
		{
			$current = $this_Measure_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSystem
entryRuleSystem returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSystemRule()); }
	iv_ruleSystem=ruleSystem
	{ $current=$iv_ruleSystem.current; }
	EOF;

// Rule System
ruleSystem returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='population'
		{
			newLeafNode(otherlv_0, grammarAccess.getSystemAccess().getPopulationKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSystemAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSystemRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getSystemAccess().getEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSystemAccess().getPopulationPopulationParserRuleCall_3_0());
				}
				lv_population_3_0=rulePopulation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSystemRule());
					}
					set(
						$current,
						"population",
						lv_population_3_0,
						"quasylab.sibilla.lang.pm.Model.Population");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getSystemAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	iv_ruleConstant=ruleConstant
	{ $current=$iv_ruleConstant.current; }
	EOF;

// Rule Constant
ruleConstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='const'
		{
			newLeafNode(otherlv_0, grammarAccess.getConstantAccess().getConstKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getConstantAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstantRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getConstantAccess().getEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstantAccess().getValueExpressionParserRuleCall_3_0());
				}
				lv_value_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstantRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"quasylab.sibilla.lang.pm.Model.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getConstantAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleMacro
entryRuleMacro returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMacroRule()); }
	iv_ruleMacro=ruleMacro
	{ $current=$iv_ruleMacro.current; }
	EOF;

// Rule Macro
ruleMacro returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='macro'
		{
			newLeafNode(otherlv_0, grammarAccess.getMacroAccess().getMacroKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getMacroAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMacroRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getMacroAccess().getEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMacroAccess().getValueExpressionParserRuleCall_3_0());
				}
				lv_value_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMacroRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"quasylab.sibilla.lang.pm.Model.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getMacroAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleMeasure
entryRuleMeasure returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMeasureRule()); }
	iv_ruleMeasure=ruleMeasure
	{ $current=$iv_ruleMeasure.current; }
	EOF;

// Rule Measure
ruleMeasure returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='measure'
		{
			newLeafNode(otherlv_0, grammarAccess.getMeasureAccess().getMeasureKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getMeasureAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMeasureRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getMeasureAccess().getEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMeasureAccess().getValueExpressionParserRuleCall_3_0());
				}
				lv_value_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMeasureRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"quasylab.sibilla.lang.pm.Model.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getMeasureAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleSpeciesDeclaration
entryRuleSpeciesDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSpeciesDeclarationRule()); }
	iv_ruleSpeciesDeclaration=ruleSpeciesDeclaration
	{ $current=$iv_ruleSpeciesDeclaration.current; }
	EOF;

// Rule SpeciesDeclaration
ruleSpeciesDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='species'
		{
			newLeafNode(otherlv_0, grammarAccess.getSpeciesDeclarationAccess().getSpeciesKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getSpeciesDeclarationAccess().getSpeciesParserRuleCall_1());
		}
		this_Species_1=ruleSpecies
		{
			$current = $this_Species_1.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getSpeciesDeclarationAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleSpecies
entryRuleSpecies returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSpeciesRule()); }
	iv_ruleSpecies=ruleSpecies
	{ $current=$iv_ruleSpecies.current; }
	EOF;

// Rule Species
ruleSpecies returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getSpeciesAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getSpeciesRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	iv_ruleRule=ruleRule
	{ $current=$iv_ruleRule.current; }
	EOF;

// Rule Rule
ruleRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='rule'
		{
			newLeafNode(otherlv_0, grammarAccess.getRuleAccess().getRuleKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRuleAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRuleRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='['
			{
				newLeafNode(otherlv_2, grammarAccess.getRuleAccess().getLeftSquareBracketKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRuleAccess().getGuardExpressionParserRuleCall_2_1_0());
					}
					lv_guard_3_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRuleRule());
						}
						set(
							$current,
							"guard",
							lv_guard_3_0,
							"quasylab.sibilla.lang.pm.Model.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=']'
			{
				newLeafNode(otherlv_4, grammarAccess.getRuleAccess().getRightSquareBracketKeyword_2_2());
			}
		)?
		otherlv_5='='
		{
			newLeafNode(otherlv_5, grammarAccess.getRuleAccess().getEqualsSignKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getPrePopulationParserRuleCall_4_0());
				}
				lv_pre_6_0=rulePopulation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"pre",
						lv_pre_6_0,
						"quasylab.sibilla.lang.pm.Model.Population");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7='-['
		{
			newLeafNode(otherlv_7, grammarAccess.getRuleAccess().getHyphenMinusLeftSquareBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getRateExpressionParserRuleCall_6_0());
				}
				lv_rate_8_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"rate",
						lv_rate_8_0,
						"quasylab.sibilla.lang.pm.Model.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_9=']->'
		{
			newLeafNode(otherlv_9, grammarAccess.getRuleAccess().getRightSquareBracketHyphenMinusGreaterThanSignKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getPostPopulationParserRuleCall_8_0());
				}
				lv_post_10_0=rulePopulation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"post",
						lv_post_10_0,
						"quasylab.sibilla.lang.pm.Model.Population");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_11=';'
		{
			newLeafNode(otherlv_11, grammarAccess.getRuleAccess().getSemicolonKeyword_9());
		}
	)
;

// Entry rule entryRulePopulation
entryRulePopulation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPopulationRule()); }
	iv_rulePopulation=rulePopulation
	{ $current=$iv_rulePopulation.current; }
	EOF;

// Rule Population
rulePopulation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPopulationAccess().getPopulationAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPopulationAccess().getPopulationMultiplicityParserRuleCall_1_0_0());
					}
					lv_population_1_0=ruleMultiplicity
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPopulationRule());
						}
						add(
							$current,
							"population",
							lv_population_1_0,
							"quasylab.sibilla.lang.pm.Model.Multiplicity");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2='|'
				{
					newLeafNode(otherlv_2, grammarAccess.getPopulationAccess().getVerticalLineKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getPopulationAccess().getPopulationMultiplicityParserRuleCall_1_1_1_0());
						}
						lv_population_3_0=ruleMultiplicity
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPopulationRule());
							}
							add(
								$current,
								"population",
								lv_population_3_0,
								"quasylab.sibilla.lang.pm.Model.Multiplicity");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleMultiplicity
entryRuleMultiplicity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicityRule()); }
	iv_ruleMultiplicity=ruleMultiplicity
	{ $current=$iv_ruleMultiplicity.current; }
	EOF;

// Rule Multiplicity
ruleMultiplicity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMultiplicityRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getMultiplicityAccess().getSpeciesSpeciesCrossReference_0_0());
				}
			)
		)
		(
			otherlv_1='['
			{
				newLeafNode(otherlv_1, grammarAccess.getMultiplicityAccess().getLeftSquareBracketKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplicityAccess().getSizeExpressionParserRuleCall_1_1_0());
					}
					lv_size_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicityRule());
						}
						set(
							$current,
							"size",
							lv_size_2_0,
							"quasylab.sibilla.lang.pm.Model.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=']'
			{
				newLeafNode(otherlv_3, grammarAccess.getMultiplicityAccess().getRightSquareBracketKeyword_1_2());
			}
		)?
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getExpressionAccess().getOrExpressionParserRuleCall());
	}
	this_OrExpression_0=ruleOrExpression
	{
		$current = $this_OrExpression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrExpressionRule()); }
	iv_ruleOrExpression=ruleOrExpression
	{ $current=$iv_ruleOrExpression.current; }
	EOF;

// Rule OrExpression
ruleOrExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0());
		}
		this_AndExpression_0=ruleAndExpression
		{
			$current = $this_AndExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='|'
			{
				newLeafNode(otherlv_2, grammarAccess.getOrExpressionAccess().getVerticalLineKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAndExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"quasylab.sibilla.lang.pm.Model.AndExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	iv_ruleAndExpression=ruleAndExpression
	{ $current=$iv_ruleAndExpression.current; }
	EOF;

// Rule AndExpression
ruleAndExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndExpressionAccess().getRelationExpressionParserRuleCall_0());
		}
		this_RelationExpression_0=ruleRelationExpression
		{
			$current = $this_RelationExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='&'
			{
				newLeafNode(otherlv_2, grammarAccess.getAndExpressionAccess().getAmpersandKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAndExpressionAccess().getRightRelationExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleRelationExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"quasylab.sibilla.lang.pm.Model.RelationExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleRelationExpression
entryRuleRelationExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationExpressionRule()); }
	iv_ruleRelationExpression=ruleRelationExpression
	{ $current=$iv_ruleRelationExpression.current; }
	EOF;

// Rule RelationExpression
ruleRelationExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRelationExpressionAccess().getSumDiffExpressionParserRuleCall_0());
		}
		this_SumDiffExpression_0=ruleSumDiffExpression
		{
			$current = $this_SumDiffExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getRelationExpressionAccess().getRelationExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRelationExpressionAccess().getOpRelationOperatorParserRuleCall_1_1_0());
					}
					lv_op_2_0=ruleRelationOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRelationExpressionRule());
						}
						set(
							$current,
							"op",
							lv_op_2_0,
							"quasylab.sibilla.lang.pm.Model.RelationOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRelationExpressionAccess().getRightSumDiffExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleSumDiffExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRelationExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"quasylab.sibilla.lang.pm.Model.SumDiffExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleRelationOperator
entryRuleRelationOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationOperatorRule()); }
	iv_ruleRelationOperator=ruleRelationOperator
	{ $current=$iv_ruleRelationOperator.current; }
	EOF;

// Rule RelationOperator
ruleRelationOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getRelationOperatorAccess().getLessOperatorAction_0_0(),
						$current);
				}
			)
			otherlv_1='<'
			{
				newLeafNode(otherlv_1, grammarAccess.getRelationOperatorAccess().getLessThanSignKeyword_0_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getRelationOperatorAccess().getLessOrEqualOperatorAction_1_0(),
						$current);
				}
			)
			otherlv_3='<='
			{
				newLeafNode(otherlv_3, grammarAccess.getRelationOperatorAccess().getLessThanSignEqualsSignKeyword_1_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getRelationOperatorAccess().getEqualOperatorAction_2_0(),
						$current);
				}
			)
			otherlv_5='=='
			{
				newLeafNode(otherlv_5, grammarAccess.getRelationOperatorAccess().getEqualsSignEqualsSignKeyword_2_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getRelationOperatorAccess().getDisEqualOperatorAction_3_0(),
						$current);
				}
			)
			otherlv_7='!='
			{
				newLeafNode(otherlv_7, grammarAccess.getRelationOperatorAccess().getExclamationMarkEqualsSignKeyword_3_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getRelationOperatorAccess().getGreaterOperatorAction_4_0(),
						$current);
				}
			)
			otherlv_9='>'
			{
				newLeafNode(otherlv_9, grammarAccess.getRelationOperatorAccess().getGreaterThanSignKeyword_4_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getRelationOperatorAccess().getGreaterOrEqualOperatorAction_5_0(),
						$current);
				}
			)
			otherlv_11='>='
			{
				newLeafNode(otherlv_11, grammarAccess.getRelationOperatorAccess().getGreaterThanSignEqualsSignKeyword_5_1());
			}
		)
	)
;

// Entry rule entryRuleMulDivExpression
entryRuleMulDivExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMulDivExpressionRule()); }
	iv_ruleMulDivExpression=ruleMulDivExpression
	{ $current=$iv_ruleMulDivExpression.current; }
	EOF;

// Rule MulDivExpression
ruleMulDivExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMulDivExpressionAccess().getModuloExpressionParserRuleCall_0());
		}
		this_ModuloExpression_0=ruleModuloExpression
		{
			$current = $this_ModuloExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getMulDivExpressionAccess().getMulDivExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMulDivExpressionAccess().getOpMulDivOperatorParserRuleCall_1_1_0());
					}
					lv_op_2_0=ruleMulDivOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMulDivExpressionRule());
						}
						set(
							$current,
							"op",
							lv_op_2_0,
							"quasylab.sibilla.lang.pm.Model.MulDivOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMulDivExpressionAccess().getRightModuloExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleModuloExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMulDivExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"quasylab.sibilla.lang.pm.Model.ModuloExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMulDivOperator
entryRuleMulDivOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMulDivOperatorRule()); }
	iv_ruleMulDivOperator=ruleMulDivOperator
	{ $current=$iv_ruleMulDivOperator.current; }
	EOF;

// Rule MulDivOperator
ruleMulDivOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getMulDivOperatorAccess().getMultiplicationOperatorAction_0_0(),
						$current);
				}
			)
			otherlv_1='*'
			{
				newLeafNode(otherlv_1, grammarAccess.getMulDivOperatorAccess().getAsteriskKeyword_0_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getMulDivOperatorAccess().getDivisionOperatorAction_1_0(),
						$current);
				}
			)
			otherlv_3='/'
			{
				newLeafNode(otherlv_3, grammarAccess.getMulDivOperatorAccess().getSolidusKeyword_1_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getMulDivOperatorAccess().getZeroDivisionOperatorAction_2_0(),
						$current);
				}
			)
			otherlv_5='//'
			{
				newLeafNode(otherlv_5, grammarAccess.getMulDivOperatorAccess().getSolidusSolidusKeyword_2_1());
			}
		)
	)
;

// Entry rule entryRuleSumDiffExpression
entryRuleSumDiffExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSumDiffExpressionRule()); }
	iv_ruleSumDiffExpression=ruleSumDiffExpression
	{ $current=$iv_ruleSumDiffExpression.current; }
	EOF;

// Rule SumDiffExpression
ruleSumDiffExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSumDiffExpressionAccess().getMulDivExpressionParserRuleCall_0());
		}
		this_MulDivExpression_0=ruleMulDivExpression
		{
			$current = $this_MulDivExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getSumDiffExpressionAccess().getSumDiffExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSumDiffExpressionAccess().getOpSumDiffOperatorParserRuleCall_1_1_0());
					}
					lv_op_2_0=ruleSumDiffOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSumDiffExpressionRule());
						}
						set(
							$current,
							"op",
							lv_op_2_0,
							"quasylab.sibilla.lang.pm.Model.SumDiffOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSumDiffExpressionAccess().getRightMulDivExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleMulDivExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSumDiffExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"quasylab.sibilla.lang.pm.Model.MulDivExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSumDiffOperator
entryRuleSumDiffOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSumDiffOperatorRule()); }
	iv_ruleSumDiffOperator=ruleSumDiffOperator
	{ $current=$iv_ruleSumDiffOperator.current; }
	EOF;

// Rule SumDiffOperator
ruleSumDiffOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getSumDiffOperatorAccess().getSumOperatorAction_0_0(),
						$current);
				}
			)
			otherlv_1='+'
			{
				newLeafNode(otherlv_1, grammarAccess.getSumDiffOperatorAccess().getPlusSignKeyword_0_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getSumDiffOperatorAccess().getDifferenceOperatorAction_1_0(),
						$current);
				}
			)
			otherlv_3='-'
			{
				newLeafNode(otherlv_3, grammarAccess.getSumDiffOperatorAccess().getHyphenMinusKeyword_1_1());
			}
		)
	)
;

// Entry rule entryRuleModuloExpression
entryRuleModuloExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModuloExpressionRule()); }
	iv_ruleModuloExpression=ruleModuloExpression
	{ $current=$iv_ruleModuloExpression.current; }
	EOF;

// Rule ModuloExpression
ruleModuloExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getModuloExpressionAccess().getBaseExpressionParserRuleCall_0());
		}
		this_BaseExpression_0=ruleBaseExpression
		{
			$current = $this_BaseExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getModuloExpressionAccess().getModuloExpressionLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='%'
			{
				newLeafNode(otherlv_2, grammarAccess.getModuloExpressionAccess().getPercentSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getModuloExpressionAccess().getRightBaseExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleBaseExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModuloExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"quasylab.sibilla.lang.pm.Model.BaseExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleBaseExpression
entryRuleBaseExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBaseExpressionRule()); }
	iv_ruleBaseExpression=ruleBaseExpression
	{ $current=$iv_ruleBaseExpression.current; }
	EOF;

// Rule BaseExpression
ruleBaseExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBaseExpressionAccess().getNumExpressionParserRuleCall_0());
		}
		this_NumExpression_0=ruleNumExpression
		{
			$current = $this_NumExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getBaseExpressionAccess().getTrueLiteralAction_1_0(),
						$current);
				}
			)
			otherlv_2='true'
			{
				newLeafNode(otherlv_2, grammarAccess.getBaseExpressionAccess().getTrueKeyword_1_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getBaseExpressionAccess().getFalseLiteralAction_2_0(),
						$current);
				}
			)
			otherlv_4='false'
			{
				newLeafNode(otherlv_4, grammarAccess.getBaseExpressionAccess().getFalseKeyword_2_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getBaseExpressionAccess().getNotExpressionAction_3_0(),
						$current);
				}
			)
			otherlv_6='!'
			{
				newLeafNode(otherlv_6, grammarAccess.getBaseExpressionAccess().getExclamationMarkKeyword_3_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBaseExpressionAccess().getArgumentBaseExpressionParserRuleCall_3_2_0());
					}
					lv_argument_7_0=ruleBaseExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBaseExpressionRule());
						}
						set(
							$current,
							"argument",
							lv_argument_7_0,
							"quasylab.sibilla.lang.pm.Model.BaseExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getBaseExpressionAccess().getFractionOfParserRuleCall_4());
		}
		this_FractionOf_8=ruleFractionOf
		{
			$current = $this_FractionOf_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBaseExpressionAccess().getNumberOfParserRuleCall_5());
		}
		this_NumberOf_9=ruleNumberOf
		{
			$current = $this_NumberOf_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBaseExpressionAccess().getIfThenElseExpressionParserRuleCall_6());
		}
		this_IfThenElseExpression_10=ruleIfThenElseExpression
		{
			$current = $this_IfThenElseExpression_10.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getBaseExpressionAccess().getNegationExpressionAction_7_0(),
						$current);
				}
			)
			otherlv_12='-'
			{
				newLeafNode(otherlv_12, grammarAccess.getBaseExpressionAccess().getHyphenMinusKeyword_7_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBaseExpressionAccess().getArgumentBaseExpressionParserRuleCall_7_2_0());
					}
					lv_argument_13_0=ruleBaseExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBaseExpressionRule());
						}
						set(
							$current,
							"argument",
							lv_argument_13_0,
							"quasylab.sibilla.lang.pm.Model.BaseExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getBaseExpressionAccess().getCallExpressionAction_8_0(),
						$current);
				}
			)
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBaseExpressionRule());
						}
					}
					otherlv_15=RULE_ID
					{
						newLeafNode(otherlv_15, grammarAccess.getBaseExpressionAccess().getSymbolReferenceableElementCrossReference_8_1_0());
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getBaseExpressionAccess().getMinExpressionAction_9_0(),
						$current);
				}
			)
			otherlv_17='min'
			{
				newLeafNode(otherlv_17, grammarAccess.getBaseExpressionAccess().getMinKeyword_9_1());
			}
			otherlv_18='('
			{
				newLeafNode(otherlv_18, grammarAccess.getBaseExpressionAccess().getLeftParenthesisKeyword_9_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBaseExpressionAccess().getArgsExpressionParserRuleCall_9_3_0());
					}
					lv_args_19_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBaseExpressionRule());
						}
						add(
							$current,
							"args",
							lv_args_19_0,
							"quasylab.sibilla.lang.pm.Model.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_20=','
				{
					newLeafNode(otherlv_20, grammarAccess.getBaseExpressionAccess().getCommaKeyword_9_4_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getBaseExpressionAccess().getArgsExpressionParserRuleCall_9_4_1_0());
						}
						lv_args_21_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getBaseExpressionRule());
							}
							add(
								$current,
								"args",
								lv_args_21_0,
								"quasylab.sibilla.lang.pm.Model.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)+
			otherlv_22=')'
			{
				newLeafNode(otherlv_22, grammarAccess.getBaseExpressionAccess().getRightParenthesisKeyword_9_5());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getBaseExpressionAccess().getMaxExpressionAction_10_0(),
						$current);
				}
			)
			otherlv_24='max'
			{
				newLeafNode(otherlv_24, grammarAccess.getBaseExpressionAccess().getMaxKeyword_10_1());
			}
			otherlv_25='('
			{
				newLeafNode(otherlv_25, grammarAccess.getBaseExpressionAccess().getLeftParenthesisKeyword_10_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBaseExpressionAccess().getArgsExpressionParserRuleCall_10_3_0());
					}
					lv_args_26_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBaseExpressionRule());
						}
						add(
							$current,
							"args",
							lv_args_26_0,
							"quasylab.sibilla.lang.pm.Model.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_27=','
				{
					newLeafNode(otherlv_27, grammarAccess.getBaseExpressionAccess().getCommaKeyword_10_4_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getBaseExpressionAccess().getArgsExpressionParserRuleCall_10_4_1_0());
						}
						lv_args_28_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getBaseExpressionRule());
							}
							add(
								$current,
								"args",
								lv_args_28_0,
								"quasylab.sibilla.lang.pm.Model.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)+
			otherlv_29=')'
			{
				newLeafNode(otherlv_29, grammarAccess.getBaseExpressionAccess().getRightParenthesisKeyword_10_5());
			}
		)
	)
;

// Entry rule entryRuleIfThenElseExpression
entryRuleIfThenElseExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfThenElseExpressionRule()); }
	iv_ruleIfThenElseExpression=ruleIfThenElseExpression
	{ $current=$iv_ruleIfThenElseExpression.current; }
	EOF;

// Rule IfThenElseExpression
ruleIfThenElseExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getIfThenElseExpressionAccess().getLeftParenthesisKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getIfThenElseExpressionAccess().getExpressionParserRuleCall_1());
		}
		this_Expression_1=ruleExpression
		{
			$current = $this_Expression_1.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getIfThenElseExpressionAccess().getIfThenElseExpressionGuardAction_2_0(),
						$current);
				}
			)
			otherlv_3='?'
			{
				newLeafNode(otherlv_3, grammarAccess.getIfThenElseExpressionAccess().getQuestionMarkKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIfThenElseExpressionAccess().getIfBranchExpressionParserRuleCall_2_2_0());
					}
					lv_ifBranch_4_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfThenElseExpressionRule());
						}
						set(
							$current,
							"ifBranch",
							lv_ifBranch_4_0,
							"quasylab.sibilla.lang.pm.Model.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5=':'
			{
				newLeafNode(otherlv_5, grammarAccess.getIfThenElseExpressionAccess().getColonKeyword_2_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIfThenElseExpressionAccess().getElseBranchExpressionParserRuleCall_2_4_0());
					}
					lv_elseBranch_6_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfThenElseExpressionRule());
						}
						set(
							$current,
							"elseBranch",
							lv_elseBranch_6_0,
							"quasylab.sibilla.lang.pm.Model.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getIfThenElseExpressionAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleFractionOf
entryRuleFractionOf returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFractionOfRule()); }
	iv_ruleFractionOf=ruleFractionOf
	{ $current=$iv_ruleFractionOf.current; }
	EOF;

// Rule FractionOf
ruleFractionOf returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='%'
		{
			newLeafNode(otherlv_0, grammarAccess.getFractionOfAccess().getPercentSignKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFractionOfRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getFractionOfAccess().getAgentSpeciesCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleNumberOf
entryRuleNumberOf returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumberOfRule()); }
	iv_ruleNumberOf=ruleNumberOf
	{ $current=$iv_ruleNumberOf.current; }
	EOF;

// Rule NumberOf
ruleNumberOf returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='#'
		{
			newLeafNode(otherlv_0, grammarAccess.getNumberOfAccess().getNumberSignKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNumberOfRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getNumberOfAccess().getAgentSpeciesCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleNumExpression
entryRuleNumExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumExpressionRule()); }
	iv_ruleNumExpression=ruleNumExpression
	{ $current=$iv_ruleNumExpression.current; }
	EOF;

// Rule NumExpression
ruleNumExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					(
						lv_intPart_0_0=RULE_INT
						{
							newLeafNode(lv_intPart_0_0, grammarAccess.getNumExpressionAccess().getIntPartINTTerminalRuleCall_0_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getNumExpressionRule());
							}
							setWithLastConsumed(
								$current,
								"intPart",
								lv_intPart_0_0,
								"org.eclipse.xtext.common.Terminals.INT");
						}
					)
				)
				(
					(
						(
							lv_isReal_1_0='.'
							{
								newLeafNode(lv_isReal_1_0, grammarAccess.getNumExpressionAccess().getIsRealFullStopKeyword_0_0_1_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getNumExpressionRule());
								}
								setWithLastConsumed($current, "isReal", true, ".");
							}
						)
					)
					(
						(
							lv_decimalPart_2_0=RULE_INT
							{
								newLeafNode(lv_decimalPart_2_0, grammarAccess.getNumExpressionAccess().getDecimalPartINTTerminalRuleCall_0_0_1_1_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getNumExpressionRule());
								}
								setWithLastConsumed(
									$current,
									"decimalPart",
									lv_decimalPart_2_0,
									"org.eclipse.xtext.common.Terminals.INT");
							}
						)
					)?
				)?
			)
			    |
			(
				(
					(
						lv_isReal_3_0='.'
						{
							newLeafNode(lv_isReal_3_0, grammarAccess.getNumExpressionAccess().getIsRealFullStopKeyword_0_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getNumExpressionRule());
							}
							setWithLastConsumed($current, "isReal", true, ".");
						}
					)
				)
				(
					(
						lv_decimalPart_4_0=RULE_INT
						{
							newLeafNode(lv_decimalPart_4_0, grammarAccess.getNumExpressionAccess().getDecimalPartINTTerminalRuleCall_0_1_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getNumExpressionRule());
							}
							setWithLastConsumed(
								$current,
								"decimalPart",
								lv_decimalPart_4_0,
								"org.eclipse.xtext.common.Terminals.INT");
						}
					)
				)
			)
		)
		(
			otherlv_5='E'
			{
				newLeafNode(otherlv_5, grammarAccess.getNumExpressionAccess().getEKeyword_1_0());
			}
			(
				(
					lv_exponent_6_0=RULE_INT
					{
						newLeafNode(lv_exponent_6_0, grammarAccess.getNumExpressionAccess().getExponentINTTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNumExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"exponent",
							lv_exponent_6_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)?
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;

/*
 * generated by Xtext 2.18.0.M3
 */
package quasylab.sibilla.lang.pm.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import quasylab.sibilla.lang.pm.services.ModelGrammarAccess;

@SuppressWarnings("all")
public class ModelSyntacticSequencer extends AbstractSyntacticSequencer {

	protected ModelGrammarAccess grammarAccess;
	protected AbstractElementAlias match_IfThenElseExpression_LeftParenthesisKeyword_0_a;
	protected AbstractElementAlias match_IfThenElseExpression_LeftParenthesisKeyword_0_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (ModelGrammarAccess) access;
		match_IfThenElseExpression_LeftParenthesisKeyword_0_a = new TokenAlias(true, true, grammarAccess.getIfThenElseExpressionAccess().getLeftParenthesisKeyword_0());
		match_IfThenElseExpression_LeftParenthesisKeyword_0_p = new TokenAlias(true, false, grammarAccess.getIfThenElseExpressionAccess().getLeftParenthesisKeyword_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_IfThenElseExpression_LeftParenthesisKeyword_0_a.equals(syntax))
				emit_IfThenElseExpression_LeftParenthesisKeyword_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_IfThenElseExpression_LeftParenthesisKeyword_0_p.equals(syntax))
				emit_IfThenElseExpression_LeftParenthesisKeyword_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '!' argument=BaseExpression
	 *     (rule start) (ambiguity) '#' agent=[Species|ID]
	 *     (rule start) (ambiguity) '%' agent=[Species|ID]
	 *     (rule start) (ambiguity) '-' argument=BaseExpression
	 *     (rule start) (ambiguity) 'false' (rule start)
	 *     (rule start) (ambiguity) 'max' '(' args+=Expression
	 *     (rule start) (ambiguity) 'min' '(' args+=Expression
	 *     (rule start) (ambiguity) 'true' (rule start)
	 *     (rule start) (ambiguity) intPart=INT
	 *     (rule start) (ambiguity) isReal?='.'
	 *     (rule start) (ambiguity) symbol=[ReferenceableElement|ID]
	 *     (rule start) (ambiguity) {AndExpression.left=}
	 *     (rule start) (ambiguity) {IfThenElseExpression.guard=}
	 *     (rule start) (ambiguity) {ModuloExpression.left=}
	 *     (rule start) (ambiguity) {MulDivExpression.left=}
	 *     (rule start) (ambiguity) {OrExpression.left=}
	 *     (rule start) (ambiguity) {RelationExpression.left=}
	 *     (rule start) (ambiguity) {SumDiffExpression.left=}
	 */
	protected void emit_IfThenElseExpression_LeftParenthesisKeyword_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '!' argument=BaseExpression
	 *     (rule start) (ambiguity) '#' agent=[Species|ID]
	 *     (rule start) (ambiguity) '%' agent=[Species|ID]
	 *     (rule start) (ambiguity) '-' argument=BaseExpression
	 *     (rule start) (ambiguity) 'false' ')' (rule start)
	 *     (rule start) (ambiguity) 'false' (rule start)
	 *     (rule start) (ambiguity) 'max' '(' args+=Expression
	 *     (rule start) (ambiguity) 'min' '(' args+=Expression
	 *     (rule start) (ambiguity) 'true' ')' (rule start)
	 *     (rule start) (ambiguity) 'true' (rule start)
	 *     (rule start) (ambiguity) intPart=INT
	 *     (rule start) (ambiguity) isReal?='.'
	 *     (rule start) (ambiguity) symbol=[ReferenceableElement|ID]
	 *     (rule start) (ambiguity) {AndExpression.left=}
	 *     (rule start) (ambiguity) {IfThenElseExpression.guard=}
	 *     (rule start) (ambiguity) {ModuloExpression.left=}
	 *     (rule start) (ambiguity) {MulDivExpression.left=}
	 *     (rule start) (ambiguity) {OrExpression.left=}
	 *     (rule start) (ambiguity) {RelationExpression.left=}
	 *     (rule start) (ambiguity) {SumDiffExpression.left=}
	 */
	protected void emit_IfThenElseExpression_LeftParenthesisKeyword_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}

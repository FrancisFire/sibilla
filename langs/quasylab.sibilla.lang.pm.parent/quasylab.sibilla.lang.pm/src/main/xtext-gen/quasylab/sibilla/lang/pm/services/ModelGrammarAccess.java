/*
 * generated by Xtext 2.18.0.M3
 */
package quasylab.sibilla.lang.pm.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ModelGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quasylab.sibilla.lang.pm.Model.Model");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Model:
		//	elements+=Element*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Element*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_0() { return cElementsElementParserRuleCall_0; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quasylab.sibilla.lang.pm.Model.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSpeciesDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConstantParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMacroParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSystemParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cMeasureParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Element:
		//	SpeciesDeclaration
		//	| Rule
		//	| Constant
		//	| Macro
		//	| System
		//	| Measure;
		@Override public ParserRule getRule() { return rule; }
		
		//SpeciesDeclaration | Rule | Constant | Macro | System | Measure
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SpeciesDeclaration
		public RuleCall getSpeciesDeclarationParserRuleCall_0() { return cSpeciesDeclarationParserRuleCall_0; }
		
		//Rule
		public RuleCall getRuleParserRuleCall_1() { return cRuleParserRuleCall_1; }
		
		//Constant
		public RuleCall getConstantParserRuleCall_2() { return cConstantParserRuleCall_2; }
		
		//Macro
		public RuleCall getMacroParserRuleCall_3() { return cMacroParserRuleCall_3; }
		
		//System
		public RuleCall getSystemParserRuleCall_4() { return cSystemParserRuleCall_4; }
		
		//Measure
		public RuleCall getMeasureParserRuleCall_5() { return cMeasureParserRuleCall_5; }
	}
	public class SystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quasylab.sibilla.lang.pm.Model.System");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPopulationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPopulationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPopulationPopulationParserRuleCall_3_0 = (RuleCall)cPopulationAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//System:
		//	'population' name=ID '=' population=Population ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'population' name=ID '=' population=Population ';'
		public Group getGroup() { return cGroup; }
		
		//'population'
		public Keyword getPopulationKeyword_0() { return cPopulationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//population=Population
		public Assignment getPopulationAssignment_3() { return cPopulationAssignment_3; }
		
		//Population
		public RuleCall getPopulationPopulationParserRuleCall_3_0() { return cPopulationPopulationParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quasylab.sibilla.lang.pm.Model.Constant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Constant:
		//	'const' name=ID '=' value=Expression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'const' name=ID '=' value=Expression ';'
		public Group getGroup() { return cGroup; }
		
		//'const'
		public Keyword getConstKeyword_0() { return cConstKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=Expression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_3_0() { return cValueExpressionParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class MacroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quasylab.sibilla.lang.pm.Model.Macro");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMacroKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Macro:
		//	'macro' name=ID '=' value=Expression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'macro' name=ID '=' value=Expression ';'
		public Group getGroup() { return cGroup; }
		
		//'macro'
		public Keyword getMacroKeyword_0() { return cMacroKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=Expression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_3_0() { return cValueExpressionParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class MeasureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quasylab.sibilla.lang.pm.Model.Measure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMeasureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Measure:
		//	'measure' name=ID '=' value=Expression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'measure' name=ID '=' value=Expression ';'
		public Group getGroup() { return cGroup; }
		
		//'measure'
		public Keyword getMeasureKeyword_0() { return cMeasureKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=Expression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_3_0() { return cValueExpressionParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ReferenceableElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quasylab.sibilla.lang.pm.Model.ReferenceableElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMacroParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ReferenceableElement:
		//	Constant | Macro;
		@Override public ParserRule getRule() { return rule; }
		
		//Constant | Macro
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Constant
		public RuleCall getConstantParserRuleCall_0() { return cConstantParserRuleCall_0; }
		
		//Macro
		public RuleCall getMacroParserRuleCall_1() { return cMacroParserRuleCall_1; }
	}
	public class SpeciesDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quasylab.sibilla.lang.pm.Model.SpeciesDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSpeciesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSpeciesParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//SpeciesDeclaration Species:
		//	'species' Species ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'species' Species ';'
		public Group getGroup() { return cGroup; }
		
		//'species'
		public Keyword getSpeciesKeyword_0() { return cSpeciesKeyword_0; }
		
		//Species
		public RuleCall getSpeciesParserRuleCall_1() { return cSpeciesParserRuleCall_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class SpeciesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quasylab.sibilla.lang.pm.Model.Species");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Species:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quasylab.sibilla.lang.pm.Model.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cGuardAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cGuardExpressionParserRuleCall_2_1_0 = (RuleCall)cGuardAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPreAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPrePopulationParserRuleCall_4_0 = (RuleCall)cPreAssignment_4.eContents().get(0);
		private final Keyword cHyphenMinusLeftSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRateAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRateExpressionParserRuleCall_6_0 = (RuleCall)cRateAssignment_6.eContents().get(0);
		private final Keyword cRightSquareBracketHyphenMinusGreaterThanSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cPostAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cPostPopulationParserRuleCall_8_0 = (RuleCall)cPostAssignment_8.eContents().get(0);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Rule:
		//	'rule' name=ID ('[' guard=Expression ']')? '=' pre=Population '-[' rate=Expression ']->' post=Population ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'rule' name=ID ('[' guard=Expression ']')? '=' pre=Population '-[' rate=Expression ']->' post=Population ';'
		public Group getGroup() { return cGroup; }
		
		//'rule'
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('[' guard=Expression ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//guard=Expression
		public Assignment getGuardAssignment_2_1() { return cGuardAssignment_2_1; }
		
		//Expression
		public RuleCall getGuardExpressionParserRuleCall_2_1_0() { return cGuardExpressionParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//pre=Population
		public Assignment getPreAssignment_4() { return cPreAssignment_4; }
		
		//Population
		public RuleCall getPrePopulationParserRuleCall_4_0() { return cPrePopulationParserRuleCall_4_0; }
		
		//'-['
		public Keyword getHyphenMinusLeftSquareBracketKeyword_5() { return cHyphenMinusLeftSquareBracketKeyword_5; }
		
		//rate=Expression
		public Assignment getRateAssignment_6() { return cRateAssignment_6; }
		
		//Expression
		public RuleCall getRateExpressionParserRuleCall_6_0() { return cRateExpressionParserRuleCall_6_0; }
		
		//']->'
		public Keyword getRightSquareBracketHyphenMinusGreaterThanSignKeyword_7() { return cRightSquareBracketHyphenMinusGreaterThanSignKeyword_7; }
		
		//post=Population
		public Assignment getPostAssignment_8() { return cPostAssignment_8; }
		
		//Population
		public RuleCall getPostPopulationParserRuleCall_8_0() { return cPostPopulationParserRuleCall_8_0; }
		
		//';'
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
	}
	public class PopulationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quasylab.sibilla.lang.pm.Model.Population");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPopulationAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cPopulationAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPopulationMultiplicityParserRuleCall_1_0_0 = (RuleCall)cPopulationAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cPopulationAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cPopulationMultiplicityParserRuleCall_1_1_1_0 = (RuleCall)cPopulationAssignment_1_1_1.eContents().get(0);
		
		//Population:
		//	{Population} (population+=Multiplicity ("|" population+=Multiplicity)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Population} (population+=Multiplicity ("|" population+=Multiplicity)*)?
		public Group getGroup() { return cGroup; }
		
		//{Population}
		public Action getPopulationAction_0() { return cPopulationAction_0; }
		
		//(population+=Multiplicity ("|" population+=Multiplicity)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//population+=Multiplicity
		public Assignment getPopulationAssignment_1_0() { return cPopulationAssignment_1_0; }
		
		//Multiplicity
		public RuleCall getPopulationMultiplicityParserRuleCall_1_0_0() { return cPopulationMultiplicityParserRuleCall_1_0_0; }
		
		//("|" population+=Multiplicity)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"|"
		public Keyword getVerticalLineKeyword_1_1_0() { return cVerticalLineKeyword_1_1_0; }
		
		//population+=Multiplicity
		public Assignment getPopulationAssignment_1_1_1() { return cPopulationAssignment_1_1_1; }
		
		//Multiplicity
		public RuleCall getPopulationMultiplicityParserRuleCall_1_1_1_0() { return cPopulationMultiplicityParserRuleCall_1_1_1_0; }
	}
	public class MultiplicityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quasylab.sibilla.lang.pm.Model.Multiplicity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSpeciesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSpeciesSpeciesCrossReference_0_0 = (CrossReference)cSpeciesAssignment_0.eContents().get(0);
		private final RuleCall cSpeciesSpeciesIDTerminalRuleCall_0_0_1 = (RuleCall)cSpeciesSpeciesCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSizeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSizeExpressionParserRuleCall_1_1_0 = (RuleCall)cSizeAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Multiplicity:
		//	species=[Species] ('[' size=Expression ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//species=[Species] ('[' size=Expression ']')?
		public Group getGroup() { return cGroup; }
		
		//species=[Species]
		public Assignment getSpeciesAssignment_0() { return cSpeciesAssignment_0; }
		
		//[Species]
		public CrossReference getSpeciesSpeciesCrossReference_0_0() { return cSpeciesSpeciesCrossReference_0_0; }
		
		//ID
		public RuleCall getSpeciesSpeciesIDTerminalRuleCall_0_0_1() { return cSpeciesSpeciesIDTerminalRuleCall_0_0_1; }
		
		//('[' size=Expression ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//size=Expression
		public Assignment getSizeAssignment_1_1() { return cSizeAssignment_1_1; }
		
		//Expression
		public RuleCall getSizeExpressionParserRuleCall_1_1_0() { return cSizeExpressionParserRuleCall_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quasylab.sibilla.lang.pm.Model.Expression");
		private final RuleCall cOrExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	OrExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//OrExpression
		public RuleCall getOrExpressionParserRuleCall() { return cOrExpressionParserRuleCall; }
	}
	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quasylab.sibilla.lang.pm.Model.OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//OrExpression Expression:
		//	AndExpression ({OrExpression.left=current} '|' right=AndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AndExpression ({OrExpression.left=current} '|' right=AndExpression)*
		public Group getGroup() { return cGroup; }
		
		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }
		
		//({OrExpression.left=current} '|' right=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{OrExpression.left=current}
		public Action getOrExpressionLeftAction_1_0() { return cOrExpressionLeftAction_1_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1_1() { return cVerticalLineKeyword_1_1; }
		
		//right=AndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AndExpression
		public RuleCall getRightAndExpressionParserRuleCall_1_2_0() { return cRightAndExpressionParserRuleCall_1_2_0; }
	}
	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quasylab.sibilla.lang.pm.Model.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightRelationExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndExpression Expression:
		//	RelationExpression ({AndExpression.left=current} '&' right=RelationExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//RelationExpression ({AndExpression.left=current} '&' right=RelationExpression)*
		public Group getGroup() { return cGroup; }
		
		//RelationExpression
		public RuleCall getRelationExpressionParserRuleCall_0() { return cRelationExpressionParserRuleCall_0; }
		
		//({AndExpression.left=current} '&' right=RelationExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AndExpression.left=current}
		public Action getAndExpressionLeftAction_1_0() { return cAndExpressionLeftAction_1_0; }
		
		//'&'
		public Keyword getAmpersandKeyword_1_1() { return cAmpersandKeyword_1_1; }
		
		//right=RelationExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//RelationExpression
		public RuleCall getRightRelationExpressionParserRuleCall_1_2_0() { return cRightRelationExpressionParserRuleCall_1_2_0; }
	}
	public class RelationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quasylab.sibilla.lang.pm.Model.RelationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSumDiffExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cRelationExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpRelationOperatorParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightSumDiffExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//RelationExpression Expression:
		//	SumDiffExpression ({RelationExpression.left=current} op=RelationOperator
		//	right=SumDiffExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//SumDiffExpression ({RelationExpression.left=current} op=RelationOperator right=SumDiffExpression)?
		public Group getGroup() { return cGroup; }
		
		//SumDiffExpression
		public RuleCall getSumDiffExpressionParserRuleCall_0() { return cSumDiffExpressionParserRuleCall_0; }
		
		//({RelationExpression.left=current} op=RelationOperator right=SumDiffExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{RelationExpression.left=current}
		public Action getRelationExpressionLeftAction_1_0() { return cRelationExpressionLeftAction_1_0; }
		
		//op=RelationOperator
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//RelationOperator
		public RuleCall getOpRelationOperatorParserRuleCall_1_1_0() { return cOpRelationOperatorParserRuleCall_1_1_0; }
		
		//right=SumDiffExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//SumDiffExpression
		public RuleCall getRightSumDiffExpressionParserRuleCall_1_2_0() { return cRightSumDiffExpressionParserRuleCall_1_2_0; }
	}
	public class RelationOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quasylab.sibilla.lang.pm.Model.RelationOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cLessOperatorAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cLessOrEqualOperatorAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cEqualOperatorAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cDisEqualOperatorAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cGreaterOperatorAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cGreaterOrEqualOperatorAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		
		//RelationOperator:
		//	{LessOperator} '<'
		//	| {LessOrEqualOperator} '<='
		//	| {EqualOperator} '=='
		//	| {DisEqualOperator} '!='
		//	| {GreaterOperator} '>'
		//	| {GreaterOrEqualOperator} '>=';
		@Override public ParserRule getRule() { return rule; }
		
		//{LessOperator} '<' | {LessOrEqualOperator} '<=' | {EqualOperator} '==' | {DisEqualOperator} '!=' | {GreaterOperator} '>'
		//| {GreaterOrEqualOperator} '>='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{LessOperator} '<'
		public Group getGroup_0() { return cGroup_0; }
		
		//{LessOperator}
		public Action getLessOperatorAction_0_0() { return cLessOperatorAction_0_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0_1() { return cLessThanSignKeyword_0_1; }
		
		//{LessOrEqualOperator} '<='
		public Group getGroup_1() { return cGroup_1; }
		
		//{LessOrEqualOperator}
		public Action getLessOrEqualOperatorAction_1_0() { return cLessOrEqualOperatorAction_1_0; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1_1() { return cLessThanSignEqualsSignKeyword_1_1; }
		
		//{EqualOperator} '=='
		public Group getGroup_2() { return cGroup_2; }
		
		//{EqualOperator}
		public Action getEqualOperatorAction_2_0() { return cEqualOperatorAction_2_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_2_1() { return cEqualsSignEqualsSignKeyword_2_1; }
		
		//{DisEqualOperator} '!='
		public Group getGroup_3() { return cGroup_3; }
		
		//{DisEqualOperator}
		public Action getDisEqualOperatorAction_3_0() { return cDisEqualOperatorAction_3_0; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_3_1() { return cExclamationMarkEqualsSignKeyword_3_1; }
		
		//{GreaterOperator} '>'
		public Group getGroup_4() { return cGroup_4; }
		
		//{GreaterOperator}
		public Action getGreaterOperatorAction_4_0() { return cGreaterOperatorAction_4_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4_1() { return cGreaterThanSignKeyword_4_1; }
		
		//{GreaterOrEqualOperator} '>='
		public Group getGroup_5() { return cGroup_5; }
		
		//{GreaterOrEqualOperator}
		public Action getGreaterOrEqualOperatorAction_5_0() { return cGreaterOrEqualOperatorAction_5_0; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_5_1() { return cGreaterThanSignEqualsSignKeyword_5_1; }
	}
	public class MulDivExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quasylab.sibilla.lang.pm.Model.MulDivExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cModuloExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMulDivExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpMulDivOperatorParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightModuloExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MulDivExpression Expression:
		//	ModuloExpression ({MulDivExpression.left=current} op=MulDivOperator right=ModuloExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ModuloExpression ({MulDivExpression.left=current} op=MulDivOperator right=ModuloExpression)*
		public Group getGroup() { return cGroup; }
		
		//ModuloExpression
		public RuleCall getModuloExpressionParserRuleCall_0() { return cModuloExpressionParserRuleCall_0; }
		
		//({MulDivExpression.left=current} op=MulDivOperator right=ModuloExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MulDivExpression.left=current}
		public Action getMulDivExpressionLeftAction_1_0() { return cMulDivExpressionLeftAction_1_0; }
		
		//op=MulDivOperator
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//MulDivOperator
		public RuleCall getOpMulDivOperatorParserRuleCall_1_1_0() { return cOpMulDivOperatorParserRuleCall_1_1_0; }
		
		//right=ModuloExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ModuloExpression
		public RuleCall getRightModuloExpressionParserRuleCall_1_2_0() { return cRightModuloExpressionParserRuleCall_1_2_0; }
	}
	public class MulDivOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quasylab.sibilla.lang.pm.Model.MulDivOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cMultiplicationOperatorAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cDivisionOperatorAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cZeroDivisionOperatorAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cSolidusSolidusKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//MulDivOperator:
		//	{MultiplicationOperator} '*'
		//	| {DivisionOperator} '/'
		//	| {ZeroDivisionOperator} '//';
		@Override public ParserRule getRule() { return rule; }
		
		//{MultiplicationOperator} '*' | {DivisionOperator} '/' | {ZeroDivisionOperator} '//'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{MultiplicationOperator} '*'
		public Group getGroup_0() { return cGroup_0; }
		
		//{MultiplicationOperator}
		public Action getMultiplicationOperatorAction_0_0() { return cMultiplicationOperatorAction_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_0_1() { return cAsteriskKeyword_0_1; }
		
		//{DivisionOperator} '/'
		public Group getGroup_1() { return cGroup_1; }
		
		//{DivisionOperator}
		public Action getDivisionOperatorAction_1_0() { return cDivisionOperatorAction_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_1() { return cSolidusKeyword_1_1; }
		
		//{ZeroDivisionOperator} '//'
		public Group getGroup_2() { return cGroup_2; }
		
		//{ZeroDivisionOperator}
		public Action getZeroDivisionOperatorAction_2_0() { return cZeroDivisionOperatorAction_2_0; }
		
		//'//'
		public Keyword getSolidusSolidusKeyword_2_1() { return cSolidusSolidusKeyword_2_1; }
	}
	public class SumDiffExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quasylab.sibilla.lang.pm.Model.SumDiffExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMulDivExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cSumDiffExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpSumDiffOperatorParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMulDivExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//SumDiffExpression Expression:
		//	MulDivExpression ({SumDiffExpression.left=current} op=SumDiffOperator right=MulDivExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MulDivExpression ({SumDiffExpression.left=current} op=SumDiffOperator right=MulDivExpression)*
		public Group getGroup() { return cGroup; }
		
		//MulDivExpression
		public RuleCall getMulDivExpressionParserRuleCall_0() { return cMulDivExpressionParserRuleCall_0; }
		
		//({SumDiffExpression.left=current} op=SumDiffOperator right=MulDivExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SumDiffExpression.left=current}
		public Action getSumDiffExpressionLeftAction_1_0() { return cSumDiffExpressionLeftAction_1_0; }
		
		//op=SumDiffOperator
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//SumDiffOperator
		public RuleCall getOpSumDiffOperatorParserRuleCall_1_1_0() { return cOpSumDiffOperatorParserRuleCall_1_1_0; }
		
		//right=MulDivExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//MulDivExpression
		public RuleCall getRightMulDivExpressionParserRuleCall_1_2_0() { return cRightMulDivExpressionParserRuleCall_1_2_0; }
	}
	public class SumDiffOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quasylab.sibilla.lang.pm.Model.SumDiffOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSumOperatorAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cDifferenceOperatorAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//SumDiffOperator:
		//	{SumOperator} '+'
		//	| {DifferenceOperator} '-';
		@Override public ParserRule getRule() { return rule; }
		
		//{SumOperator} '+' | {DifferenceOperator} '-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{SumOperator} '+'
		public Group getGroup_0() { return cGroup_0; }
		
		//{SumOperator}
		public Action getSumOperatorAction_0_0() { return cSumOperatorAction_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_0_1() { return cPlusSignKeyword_0_1; }
		
		//{DifferenceOperator} '-'
		public Group getGroup_1() { return cGroup_1; }
		
		//{DifferenceOperator}
		public Action getDifferenceOperatorAction_1_0() { return cDifferenceOperatorAction_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }
	}
	public class ModuloExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quasylab.sibilla.lang.pm.Model.ModuloExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBaseExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cModuloExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cPercentSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBaseExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ModuloExpression Expression:
		//	BaseExpression ({ModuloExpression.left=current} '%' right=BaseExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//BaseExpression ({ModuloExpression.left=current} '%' right=BaseExpression)*
		public Group getGroup() { return cGroup; }
		
		//BaseExpression
		public RuleCall getBaseExpressionParserRuleCall_0() { return cBaseExpressionParserRuleCall_0; }
		
		//({ModuloExpression.left=current} '%' right=BaseExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ModuloExpression.left=current}
		public Action getModuloExpressionLeftAction_1_0() { return cModuloExpressionLeftAction_1_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_1_1() { return cPercentSignKeyword_1_1; }
		
		//right=BaseExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//BaseExpression
		public RuleCall getRightBaseExpressionParserRuleCall_1_2_0() { return cRightBaseExpressionParserRuleCall_1_2_0; }
	}
	public class BaseExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quasylab.sibilla.lang.pm.Model.BaseExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cTrueLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cTrueKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cFalseLiteralAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cFalseKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cNotExpressionAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cArgumentAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cArgumentBaseExpressionParserRuleCall_3_2_0 = (RuleCall)cArgumentAssignment_3_2.eContents().get(0);
		private final RuleCall cFractionOfParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cNumberOfParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cIfThenElseExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cNegationExpressionAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cArgumentAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cArgumentBaseExpressionParserRuleCall_7_2_0 = (RuleCall)cArgumentAssignment_7_2.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cCallExpressionAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Assignment cSymbolAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final CrossReference cSymbolReferenceableElementCrossReference_8_1_0 = (CrossReference)cSymbolAssignment_8_1.eContents().get(0);
		private final RuleCall cSymbolReferenceableElementIDTerminalRuleCall_8_1_0_1 = (RuleCall)cSymbolReferenceableElementCrossReference_8_1_0.eContents().get(1);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cMinExpressionAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Keyword cMinKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		private final Assignment cArgsAssignment_9_3 = (Assignment)cGroup_9.eContents().get(3);
		private final RuleCall cArgsExpressionParserRuleCall_9_3_0 = (RuleCall)cArgsAssignment_9_3.eContents().get(0);
		private final Group cGroup_9_4 = (Group)cGroup_9.eContents().get(4);
		private final Keyword cCommaKeyword_9_4_0 = (Keyword)cGroup_9_4.eContents().get(0);
		private final Assignment cArgsAssignment_9_4_1 = (Assignment)cGroup_9_4.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_9_4_1_0 = (RuleCall)cArgsAssignment_9_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9_5 = (Keyword)cGroup_9.eContents().get(5);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Action cMaxExpressionAction_10_0 = (Action)cGroup_10.eContents().get(0);
		private final Keyword cMaxKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_10_2 = (Keyword)cGroup_10.eContents().get(2);
		private final Assignment cArgsAssignment_10_3 = (Assignment)cGroup_10.eContents().get(3);
		private final RuleCall cArgsExpressionParserRuleCall_10_3_0 = (RuleCall)cArgsAssignment_10_3.eContents().get(0);
		private final Group cGroup_10_4 = (Group)cGroup_10.eContents().get(4);
		private final Keyword cCommaKeyword_10_4_0 = (Keyword)cGroup_10_4.eContents().get(0);
		private final Assignment cArgsAssignment_10_4_1 = (Assignment)cGroup_10_4.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_10_4_1_0 = (RuleCall)cArgsAssignment_10_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10_5 = (Keyword)cGroup_10.eContents().get(5);
		
		//BaseExpression Expression:
		//	NumExpression
		//	| {TrueLiteral} 'true'
		//	| {FalseLiteral} 'false'
		//	| {NotExpression} '!' argument=BaseExpression
		//	| FractionOf
		//	| NumberOf
		//	| IfThenElseExpression
		//	| {NegationExpression} '-' argument=BaseExpression
		//	| {CallExpression} symbol=[ReferenceableElement] | {MinExpression} 'min' '(' args+=Expression (',' args+=Expression)+
		//	')'
		//	| {MaxExpression} 'max' '(' args+=Expression (',' args+=Expression)+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//NumExpression | {TrueLiteral} 'true' | {FalseLiteral} 'false' | {NotExpression} '!' argument=BaseExpression | FractionOf
		//| NumberOf | IfThenElseExpression | {NegationExpression} '-' argument=BaseExpression | {CallExpression}
		//symbol=[ReferenceableElement] | {MinExpression} 'min' '(' args+=Expression (',' args+=Expression)+ ')' |
		//{MaxExpression} 'max' '(' args+=Expression (',' args+=Expression)+ ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NumExpression
		public RuleCall getNumExpressionParserRuleCall_0() { return cNumExpressionParserRuleCall_0; }
		
		//{TrueLiteral} 'true'
		public Group getGroup_1() { return cGroup_1; }
		
		//{TrueLiteral}
		public Action getTrueLiteralAction_1_0() { return cTrueLiteralAction_1_0; }
		
		//'true'
		public Keyword getTrueKeyword_1_1() { return cTrueKeyword_1_1; }
		
		//{FalseLiteral} 'false'
		public Group getGroup_2() { return cGroup_2; }
		
		//{FalseLiteral}
		public Action getFalseLiteralAction_2_0() { return cFalseLiteralAction_2_0; }
		
		//'false'
		public Keyword getFalseKeyword_2_1() { return cFalseKeyword_2_1; }
		
		//{NotExpression} '!' argument=BaseExpression
		public Group getGroup_3() { return cGroup_3; }
		
		//{NotExpression}
		public Action getNotExpressionAction_3_0() { return cNotExpressionAction_3_0; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_3_1() { return cExclamationMarkKeyword_3_1; }
		
		//argument=BaseExpression
		public Assignment getArgumentAssignment_3_2() { return cArgumentAssignment_3_2; }
		
		//BaseExpression
		public RuleCall getArgumentBaseExpressionParserRuleCall_3_2_0() { return cArgumentBaseExpressionParserRuleCall_3_2_0; }
		
		//FractionOf
		public RuleCall getFractionOfParserRuleCall_4() { return cFractionOfParserRuleCall_4; }
		
		//NumberOf
		public RuleCall getNumberOfParserRuleCall_5() { return cNumberOfParserRuleCall_5; }
		
		//IfThenElseExpression
		public RuleCall getIfThenElseExpressionParserRuleCall_6() { return cIfThenElseExpressionParserRuleCall_6; }
		
		//{NegationExpression} '-' argument=BaseExpression
		public Group getGroup_7() { return cGroup_7; }
		
		//{NegationExpression}
		public Action getNegationExpressionAction_7_0() { return cNegationExpressionAction_7_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_7_1() { return cHyphenMinusKeyword_7_1; }
		
		//argument=BaseExpression
		public Assignment getArgumentAssignment_7_2() { return cArgumentAssignment_7_2; }
		
		//BaseExpression
		public RuleCall getArgumentBaseExpressionParserRuleCall_7_2_0() { return cArgumentBaseExpressionParserRuleCall_7_2_0; }
		
		//{CallExpression} symbol=[ReferenceableElement]
		public Group getGroup_8() { return cGroup_8; }
		
		//{CallExpression}
		public Action getCallExpressionAction_8_0() { return cCallExpressionAction_8_0; }
		
		//symbol=[ReferenceableElement]
		public Assignment getSymbolAssignment_8_1() { return cSymbolAssignment_8_1; }
		
		//[ReferenceableElement]
		public CrossReference getSymbolReferenceableElementCrossReference_8_1_0() { return cSymbolReferenceableElementCrossReference_8_1_0; }
		
		//ID
		public RuleCall getSymbolReferenceableElementIDTerminalRuleCall_8_1_0_1() { return cSymbolReferenceableElementIDTerminalRuleCall_8_1_0_1; }
		
		//{MinExpression} 'min' '(' args+=Expression (',' args+=Expression)+ ')'
		public Group getGroup_9() { return cGroup_9; }
		
		//{MinExpression}
		public Action getMinExpressionAction_9_0() { return cMinExpressionAction_9_0; }
		
		//'min'
		public Keyword getMinKeyword_9_1() { return cMinKeyword_9_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_9_2() { return cLeftParenthesisKeyword_9_2; }
		
		//args+=Expression
		public Assignment getArgsAssignment_9_3() { return cArgsAssignment_9_3; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_9_3_0() { return cArgsExpressionParserRuleCall_9_3_0; }
		
		//(',' args+=Expression)+
		public Group getGroup_9_4() { return cGroup_9_4; }
		
		//','
		public Keyword getCommaKeyword_9_4_0() { return cCommaKeyword_9_4_0; }
		
		//args+=Expression
		public Assignment getArgsAssignment_9_4_1() { return cArgsAssignment_9_4_1; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_9_4_1_0() { return cArgsExpressionParserRuleCall_9_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9_5() { return cRightParenthesisKeyword_9_5; }
		
		//{MaxExpression} 'max' '(' args+=Expression (',' args+=Expression)+ ')'
		public Group getGroup_10() { return cGroup_10; }
		
		//{MaxExpression}
		public Action getMaxExpressionAction_10_0() { return cMaxExpressionAction_10_0; }
		
		//'max'
		public Keyword getMaxKeyword_10_1() { return cMaxKeyword_10_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_10_2() { return cLeftParenthesisKeyword_10_2; }
		
		//args+=Expression
		public Assignment getArgsAssignment_10_3() { return cArgsAssignment_10_3; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_10_3_0() { return cArgsExpressionParserRuleCall_10_3_0; }
		
		//(',' args+=Expression)+
		public Group getGroup_10_4() { return cGroup_10_4; }
		
		//','
		public Keyword getCommaKeyword_10_4_0() { return cCommaKeyword_10_4_0; }
		
		//args+=Expression
		public Assignment getArgsAssignment_10_4_1() { return cArgsAssignment_10_4_1; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_10_4_1_0() { return cArgsExpressionParserRuleCall_10_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_10_5() { return cRightParenthesisKeyword_10_5; }
	}
	public class IfThenElseExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quasylab.sibilla.lang.pm.Model.IfThenElseExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Action cIfThenElseExpressionGuardAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cIfBranchAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cIfBranchExpressionParserRuleCall_2_2_0 = (RuleCall)cIfBranchAssignment_2_2.eContents().get(0);
		private final Keyword cColonKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cElseBranchAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cElseBranchExpressionParserRuleCall_2_4_0 = (RuleCall)cElseBranchAssignment_2_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//IfThenElseExpression Expression:
		//	'(' Expression ({IfThenElseExpression.guard=current} '?' ifBranch=Expression ':' elseBranch=Expression)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Expression ({IfThenElseExpression.guard=current} '?' ifBranch=Expression ':' elseBranch=Expression)? ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
		
		//({IfThenElseExpression.guard=current} '?' ifBranch=Expression ':' elseBranch=Expression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//{IfThenElseExpression.guard=current}
		public Action getIfThenElseExpressionGuardAction_2_0() { return cIfThenElseExpressionGuardAction_2_0; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_2_1() { return cQuestionMarkKeyword_2_1; }
		
		//ifBranch=Expression
		public Assignment getIfBranchAssignment_2_2() { return cIfBranchAssignment_2_2; }
		
		//Expression
		public RuleCall getIfBranchExpressionParserRuleCall_2_2_0() { return cIfBranchExpressionParserRuleCall_2_2_0; }
		
		//':'
		public Keyword getColonKeyword_2_3() { return cColonKeyword_2_3; }
		
		//elseBranch=Expression
		public Assignment getElseBranchAssignment_2_4() { return cElseBranchAssignment_2_4; }
		
		//Expression
		public RuleCall getElseBranchExpressionParserRuleCall_2_4_0() { return cElseBranchExpressionParserRuleCall_2_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class FractionOfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quasylab.sibilla.lang.pm.Model.FractionOf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPercentSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAgentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cAgentSpeciesCrossReference_1_0 = (CrossReference)cAgentAssignment_1.eContents().get(0);
		private final RuleCall cAgentSpeciesIDTerminalRuleCall_1_0_1 = (RuleCall)cAgentSpeciesCrossReference_1_0.eContents().get(1);
		
		//FractionOf:
		//	'%' agent=[Species];
		@Override public ParserRule getRule() { return rule; }
		
		//'%' agent=[Species]
		public Group getGroup() { return cGroup; }
		
		//'%'
		public Keyword getPercentSignKeyword_0() { return cPercentSignKeyword_0; }
		
		//agent=[Species]
		public Assignment getAgentAssignment_1() { return cAgentAssignment_1; }
		
		//[Species]
		public CrossReference getAgentSpeciesCrossReference_1_0() { return cAgentSpeciesCrossReference_1_0; }
		
		//ID
		public RuleCall getAgentSpeciesIDTerminalRuleCall_1_0_1() { return cAgentSpeciesIDTerminalRuleCall_1_0_1; }
	}
	public class NumberOfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quasylab.sibilla.lang.pm.Model.NumberOf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAgentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cAgentSpeciesCrossReference_1_0 = (CrossReference)cAgentAssignment_1.eContents().get(0);
		private final RuleCall cAgentSpeciesIDTerminalRuleCall_1_0_1 = (RuleCall)cAgentSpeciesCrossReference_1_0.eContents().get(1);
		
		//NumberOf:
		//	'#' agent=[Species];
		@Override public ParserRule getRule() { return rule; }
		
		//'#' agent=[Species]
		public Group getGroup() { return cGroup; }
		
		//'#'
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//agent=[Species]
		public Assignment getAgentAssignment_1() { return cAgentAssignment_1; }
		
		//[Species]
		public CrossReference getAgentSpeciesCrossReference_1_0() { return cAgentSpeciesCrossReference_1_0; }
		
		//ID
		public RuleCall getAgentSpeciesIDTerminalRuleCall_1_0_1() { return cAgentSpeciesIDTerminalRuleCall_1_0_1; }
	}
	public class NumExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "quasylab.sibilla.lang.pm.Model.NumExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cIntPartAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cIntPartINTTerminalRuleCall_0_0_0_0 = (RuleCall)cIntPartAssignment_0_0_0.eContents().get(0);
		private final Group cGroup_0_0_1 = (Group)cGroup_0_0.eContents().get(1);
		private final Assignment cIsRealAssignment_0_0_1_0 = (Assignment)cGroup_0_0_1.eContents().get(0);
		private final Keyword cIsRealFullStopKeyword_0_0_1_0_0 = (Keyword)cIsRealAssignment_0_0_1_0.eContents().get(0);
		private final Assignment cDecimalPartAssignment_0_0_1_1 = (Assignment)cGroup_0_0_1.eContents().get(1);
		private final RuleCall cDecimalPartINTTerminalRuleCall_0_0_1_1_0 = (RuleCall)cDecimalPartAssignment_0_0_1_1.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cIsRealAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final Keyword cIsRealFullStopKeyword_0_1_0_0 = (Keyword)cIsRealAssignment_0_1_0.eContents().get(0);
		private final Assignment cDecimalPartAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cDecimalPartINTTerminalRuleCall_0_1_1_0 = (RuleCall)cDecimalPartAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExponentAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExponentINTTerminalRuleCall_1_1_0 = (RuleCall)cExponentAssignment_1_1.eContents().get(0);
		
		//NumExpression:
		//	(intPart=INT (isReal?='.' decimalPart=INT?)?
		//	| isReal?='.' decimalPart=INT) ('E' exponent=INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(intPart=INT (isReal?='.' decimalPart=INT?)? | isReal?='.' decimalPart=INT) ('E' exponent=INT)?
		public Group getGroup() { return cGroup; }
		
		//intPart=INT (isReal?='.' decimalPart=INT?)? | isReal?='.' decimalPart=INT
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//intPart=INT (isReal?='.' decimalPart=INT?)?
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//intPart=INT
		public Assignment getIntPartAssignment_0_0_0() { return cIntPartAssignment_0_0_0; }
		
		//INT
		public RuleCall getIntPartINTTerminalRuleCall_0_0_0_0() { return cIntPartINTTerminalRuleCall_0_0_0_0; }
		
		//(isReal?='.' decimalPart=INT?)?
		public Group getGroup_0_0_1() { return cGroup_0_0_1; }
		
		//isReal?='.'
		public Assignment getIsRealAssignment_0_0_1_0() { return cIsRealAssignment_0_0_1_0; }
		
		//'.'
		public Keyword getIsRealFullStopKeyword_0_0_1_0_0() { return cIsRealFullStopKeyword_0_0_1_0_0; }
		
		//decimalPart=INT?
		public Assignment getDecimalPartAssignment_0_0_1_1() { return cDecimalPartAssignment_0_0_1_1; }
		
		//INT
		public RuleCall getDecimalPartINTTerminalRuleCall_0_0_1_1_0() { return cDecimalPartINTTerminalRuleCall_0_0_1_1_0; }
		
		//isReal?='.' decimalPart=INT
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//isReal?='.'
		public Assignment getIsRealAssignment_0_1_0() { return cIsRealAssignment_0_1_0; }
		
		//'.'
		public Keyword getIsRealFullStopKeyword_0_1_0_0() { return cIsRealFullStopKeyword_0_1_0_0; }
		
		//decimalPart=INT
		public Assignment getDecimalPartAssignment_0_1_1() { return cDecimalPartAssignment_0_1_1; }
		
		//INT
		public RuleCall getDecimalPartINTTerminalRuleCall_0_1_1_0() { return cDecimalPartINTTerminalRuleCall_0_1_1_0; }
		
		//('E' exponent=INT)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'E'
		public Keyword getEKeyword_1_0() { return cEKeyword_1_0; }
		
		//exponent=INT
		public Assignment getExponentAssignment_1_1() { return cExponentAssignment_1_1; }
		
		//INT
		public RuleCall getExponentINTTerminalRuleCall_1_1_0() { return cExponentINTTerminalRuleCall_1_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final ElementElements pElement;
	private final SystemElements pSystem;
	private final ConstantElements pConstant;
	private final MacroElements pMacro;
	private final MeasureElements pMeasure;
	private final ReferenceableElementElements pReferenceableElement;
	private final SpeciesDeclarationElements pSpeciesDeclaration;
	private final SpeciesElements pSpecies;
	private final RuleElements pRule;
	private final PopulationElements pPopulation;
	private final MultiplicityElements pMultiplicity;
	private final ExpressionElements pExpression;
	private final OrExpressionElements pOrExpression;
	private final AndExpressionElements pAndExpression;
	private final RelationExpressionElements pRelationExpression;
	private final RelationOperatorElements pRelationOperator;
	private final MulDivExpressionElements pMulDivExpression;
	private final MulDivOperatorElements pMulDivOperator;
	private final SumDiffExpressionElements pSumDiffExpression;
	private final SumDiffOperatorElements pSumDiffOperator;
	private final ModuloExpressionElements pModuloExpression;
	private final BaseExpressionElements pBaseExpression;
	private final IfThenElseExpressionElements pIfThenElseExpression;
	private final FractionOfElements pFractionOf;
	private final NumberOfElements pNumberOf;
	private final NumExpressionElements pNumExpression;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ModelGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pElement = new ElementElements();
		this.pSystem = new SystemElements();
		this.pConstant = new ConstantElements();
		this.pMacro = new MacroElements();
		this.pMeasure = new MeasureElements();
		this.pReferenceableElement = new ReferenceableElementElements();
		this.pSpeciesDeclaration = new SpeciesDeclarationElements();
		this.pSpecies = new SpeciesElements();
		this.pRule = new RuleElements();
		this.pPopulation = new PopulationElements();
		this.pMultiplicity = new MultiplicityElements();
		this.pExpression = new ExpressionElements();
		this.pOrExpression = new OrExpressionElements();
		this.pAndExpression = new AndExpressionElements();
		this.pRelationExpression = new RelationExpressionElements();
		this.pRelationOperator = new RelationOperatorElements();
		this.pMulDivExpression = new MulDivExpressionElements();
		this.pMulDivOperator = new MulDivOperatorElements();
		this.pSumDiffExpression = new SumDiffExpressionElements();
		this.pSumDiffOperator = new SumDiffOperatorElements();
		this.pModuloExpression = new ModuloExpressionElements();
		this.pBaseExpression = new BaseExpressionElements();
		this.pIfThenElseExpression = new IfThenElseExpressionElements();
		this.pFractionOf = new FractionOfElements();
		this.pNumberOf = new NumberOfElements();
		this.pNumExpression = new NumExpressionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("quasylab.sibilla.lang.pm.Model".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	elements+=Element*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Element:
	//	SpeciesDeclaration
	//	| Rule
	//	| Constant
	//	| Macro
	//	| System
	//	| Measure;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//System:
	//	'population' name=ID '=' population=Population ';';
	public SystemElements getSystemAccess() {
		return pSystem;
	}
	
	public ParserRule getSystemRule() {
		return getSystemAccess().getRule();
	}
	
	//Constant:
	//	'const' name=ID '=' value=Expression ';';
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}
	
	//Macro:
	//	'macro' name=ID '=' value=Expression ';';
	public MacroElements getMacroAccess() {
		return pMacro;
	}
	
	public ParserRule getMacroRule() {
		return getMacroAccess().getRule();
	}
	
	//Measure:
	//	'measure' name=ID '=' value=Expression ';';
	public MeasureElements getMeasureAccess() {
		return pMeasure;
	}
	
	public ParserRule getMeasureRule() {
		return getMeasureAccess().getRule();
	}
	
	//ReferenceableElement:
	//	Constant | Macro;
	public ReferenceableElementElements getReferenceableElementAccess() {
		return pReferenceableElement;
	}
	
	public ParserRule getReferenceableElementRule() {
		return getReferenceableElementAccess().getRule();
	}
	
	//SpeciesDeclaration Species:
	//	'species' Species ';';
	public SpeciesDeclarationElements getSpeciesDeclarationAccess() {
		return pSpeciesDeclaration;
	}
	
	public ParserRule getSpeciesDeclarationRule() {
		return getSpeciesDeclarationAccess().getRule();
	}
	
	//Species:
	//	name=ID;
	public SpeciesElements getSpeciesAccess() {
		return pSpecies;
	}
	
	public ParserRule getSpeciesRule() {
		return getSpeciesAccess().getRule();
	}
	
	//Rule:
	//	'rule' name=ID ('[' guard=Expression ']')? '=' pre=Population '-[' rate=Expression ']->' post=Population ';';
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//Population:
	//	{Population} (population+=Multiplicity ("|" population+=Multiplicity)*)?;
	public PopulationElements getPopulationAccess() {
		return pPopulation;
	}
	
	public ParserRule getPopulationRule() {
		return getPopulationAccess().getRule();
	}
	
	//Multiplicity:
	//	species=[Species] ('[' size=Expression ']')?;
	public MultiplicityElements getMultiplicityAccess() {
		return pMultiplicity;
	}
	
	public ParserRule getMultiplicityRule() {
		return getMultiplicityAccess().getRule();
	}
	
	//Expression:
	//	OrExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//OrExpression Expression:
	//	AndExpression ({OrExpression.left=current} '|' right=AndExpression)*;
	public OrExpressionElements getOrExpressionAccess() {
		return pOrExpression;
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}
	
	//AndExpression Expression:
	//	RelationExpression ({AndExpression.left=current} '&' right=RelationExpression)*;
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//RelationExpression Expression:
	//	SumDiffExpression ({RelationExpression.left=current} op=RelationOperator
	//	right=SumDiffExpression)?;
	public RelationExpressionElements getRelationExpressionAccess() {
		return pRelationExpression;
	}
	
	public ParserRule getRelationExpressionRule() {
		return getRelationExpressionAccess().getRule();
	}
	
	//RelationOperator:
	//	{LessOperator} '<'
	//	| {LessOrEqualOperator} '<='
	//	| {EqualOperator} '=='
	//	| {DisEqualOperator} '!='
	//	| {GreaterOperator} '>'
	//	| {GreaterOrEqualOperator} '>=';
	public RelationOperatorElements getRelationOperatorAccess() {
		return pRelationOperator;
	}
	
	public ParserRule getRelationOperatorRule() {
		return getRelationOperatorAccess().getRule();
	}
	
	//MulDivExpression Expression:
	//	ModuloExpression ({MulDivExpression.left=current} op=MulDivOperator right=ModuloExpression)*;
	public MulDivExpressionElements getMulDivExpressionAccess() {
		return pMulDivExpression;
	}
	
	public ParserRule getMulDivExpressionRule() {
		return getMulDivExpressionAccess().getRule();
	}
	
	//MulDivOperator:
	//	{MultiplicationOperator} '*'
	//	| {DivisionOperator} '/'
	//	| {ZeroDivisionOperator} '//';
	public MulDivOperatorElements getMulDivOperatorAccess() {
		return pMulDivOperator;
	}
	
	public ParserRule getMulDivOperatorRule() {
		return getMulDivOperatorAccess().getRule();
	}
	
	//SumDiffExpression Expression:
	//	MulDivExpression ({SumDiffExpression.left=current} op=SumDiffOperator right=MulDivExpression)*;
	public SumDiffExpressionElements getSumDiffExpressionAccess() {
		return pSumDiffExpression;
	}
	
	public ParserRule getSumDiffExpressionRule() {
		return getSumDiffExpressionAccess().getRule();
	}
	
	//SumDiffOperator:
	//	{SumOperator} '+'
	//	| {DifferenceOperator} '-';
	public SumDiffOperatorElements getSumDiffOperatorAccess() {
		return pSumDiffOperator;
	}
	
	public ParserRule getSumDiffOperatorRule() {
		return getSumDiffOperatorAccess().getRule();
	}
	
	//ModuloExpression Expression:
	//	BaseExpression ({ModuloExpression.left=current} '%' right=BaseExpression)*;
	public ModuloExpressionElements getModuloExpressionAccess() {
		return pModuloExpression;
	}
	
	public ParserRule getModuloExpressionRule() {
		return getModuloExpressionAccess().getRule();
	}
	
	//BaseExpression Expression:
	//	NumExpression
	//	| {TrueLiteral} 'true'
	//	| {FalseLiteral} 'false'
	//	| {NotExpression} '!' argument=BaseExpression
	//	| FractionOf
	//	| NumberOf
	//	| IfThenElseExpression
	//	| {NegationExpression} '-' argument=BaseExpression
	//	| {CallExpression} symbol=[ReferenceableElement] | {MinExpression} 'min' '(' args+=Expression (',' args+=Expression)+
	//	')'
	//	| {MaxExpression} 'max' '(' args+=Expression (',' args+=Expression)+ ')';
	public BaseExpressionElements getBaseExpressionAccess() {
		return pBaseExpression;
	}
	
	public ParserRule getBaseExpressionRule() {
		return getBaseExpressionAccess().getRule();
	}
	
	//IfThenElseExpression Expression:
	//	'(' Expression ({IfThenElseExpression.guard=current} '?' ifBranch=Expression ':' elseBranch=Expression)? ')';
	public IfThenElseExpressionElements getIfThenElseExpressionAccess() {
		return pIfThenElseExpression;
	}
	
	public ParserRule getIfThenElseExpressionRule() {
		return getIfThenElseExpressionAccess().getRule();
	}
	
	//FractionOf:
	//	'%' agent=[Species];
	public FractionOfElements getFractionOfAccess() {
		return pFractionOf;
	}
	
	public ParserRule getFractionOfRule() {
		return getFractionOfAccess().getRule();
	}
	
	//NumberOf:
	//	'#' agent=[Species];
	public NumberOfElements getNumberOfAccess() {
		return pNumberOf;
	}
	
	public ParserRule getNumberOfRule() {
		return getNumberOfAccess().getRule();
	}
	
	//NumExpression:
	//	(intPart=INT (isReal?='.' decimalPart=INT?)?
	//	| isReal?='.' decimalPart=INT) ('E' exponent=INT)?;
	public NumExpressionElements getNumExpressionAccess() {
		return pNumExpression;
	}
	
	public ParserRule getNumExpressionRule() {
		return getNumExpressionAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

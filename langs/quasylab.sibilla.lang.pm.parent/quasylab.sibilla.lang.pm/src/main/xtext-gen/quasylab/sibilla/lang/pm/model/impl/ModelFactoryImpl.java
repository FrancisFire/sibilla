/**
 * generated by Xtext 2.18.0.M3
 */
package quasylab.sibilla.lang.pm.model.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import quasylab.sibilla.lang.pm.model.AndExpression;
import quasylab.sibilla.lang.pm.model.CallExpression;
import quasylab.sibilla.lang.pm.model.Constant;
import quasylab.sibilla.lang.pm.model.DifferenceOperator;
import quasylab.sibilla.lang.pm.model.DisEqualOperator;
import quasylab.sibilla.lang.pm.model.DivisionOperator;
import quasylab.sibilla.lang.pm.model.Element;
import quasylab.sibilla.lang.pm.model.EqualOperator;
import quasylab.sibilla.lang.pm.model.Expression;
import quasylab.sibilla.lang.pm.model.FalseLiteral;
import quasylab.sibilla.lang.pm.model.FractionOf;
import quasylab.sibilla.lang.pm.model.GreaterOperator;
import quasylab.sibilla.lang.pm.model.GreaterOrEqualOperator;
import quasylab.sibilla.lang.pm.model.IfThenElseExpression;
import quasylab.sibilla.lang.pm.model.LessOperator;
import quasylab.sibilla.lang.pm.model.LessOrEqualOperator;
import quasylab.sibilla.lang.pm.model.Macro;
import quasylab.sibilla.lang.pm.model.MaxExpression;
import quasylab.sibilla.lang.pm.model.Measure;
import quasylab.sibilla.lang.pm.model.MinExpression;
import quasylab.sibilla.lang.pm.model.Model;
import quasylab.sibilla.lang.pm.model.ModelFactory;
import quasylab.sibilla.lang.pm.model.ModelPackage;
import quasylab.sibilla.lang.pm.model.ModuloExpression;
import quasylab.sibilla.lang.pm.model.MulDivExpression;
import quasylab.sibilla.lang.pm.model.MulDivOperator;
import quasylab.sibilla.lang.pm.model.MultiplicationOperator;
import quasylab.sibilla.lang.pm.model.Multiplicity;
import quasylab.sibilla.lang.pm.model.NegationExpression;
import quasylab.sibilla.lang.pm.model.NotExpression;
import quasylab.sibilla.lang.pm.model.NumExpression;
import quasylab.sibilla.lang.pm.model.NumberOf;
import quasylab.sibilla.lang.pm.model.OrExpression;
import quasylab.sibilla.lang.pm.model.Population;
import quasylab.sibilla.lang.pm.model.ReferenceableElement;
import quasylab.sibilla.lang.pm.model.RelationExpression;
import quasylab.sibilla.lang.pm.model.RelationOperator;
import quasylab.sibilla.lang.pm.model.Rule;
import quasylab.sibilla.lang.pm.model.Species;
import quasylab.sibilla.lang.pm.model.SumDiffExpression;
import quasylab.sibilla.lang.pm.model.SumDiffOperator;
import quasylab.sibilla.lang.pm.model.SumOperator;
import quasylab.sibilla.lang.pm.model.TrueLiteral;
import quasylab.sibilla.lang.pm.model.ZeroDivisionOperator;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ModelFactoryImpl extends EFactoryImpl implements ModelFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static ModelFactory init()
  {
    try
    {
      ModelFactory theModelFactory = (ModelFactory)EPackage.Registry.INSTANCE.getEFactory(ModelPackage.eNS_URI);
      if (theModelFactory != null)
      {
        return theModelFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new ModelFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ModelFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case ModelPackage.MODEL: return createModel();
      case ModelPackage.ELEMENT: return createElement();
      case ModelPackage.SYSTEM: return createSystem();
      case ModelPackage.CONSTANT: return createConstant();
      case ModelPackage.MACRO: return createMacro();
      case ModelPackage.MEASURE: return createMeasure();
      case ModelPackage.REFERENCEABLE_ELEMENT: return createReferenceableElement();
      case ModelPackage.SPECIES: return createSpecies();
      case ModelPackage.RULE: return createRule();
      case ModelPackage.POPULATION: return createPopulation();
      case ModelPackage.MULTIPLICITY: return createMultiplicity();
      case ModelPackage.EXPRESSION: return createExpression();
      case ModelPackage.RELATION_OPERATOR: return createRelationOperator();
      case ModelPackage.MUL_DIV_OPERATOR: return createMulDivOperator();
      case ModelPackage.SUM_DIFF_OPERATOR: return createSumDiffOperator();
      case ModelPackage.FRACTION_OF: return createFractionOf();
      case ModelPackage.NUMBER_OF: return createNumberOf();
      case ModelPackage.NUM_EXPRESSION: return createNumExpression();
      case ModelPackage.OR_EXPRESSION: return createOrExpression();
      case ModelPackage.AND_EXPRESSION: return createAndExpression();
      case ModelPackage.RELATION_EXPRESSION: return createRelationExpression();
      case ModelPackage.LESS_OPERATOR: return createLessOperator();
      case ModelPackage.LESS_OR_EQUAL_OPERATOR: return createLessOrEqualOperator();
      case ModelPackage.EQUAL_OPERATOR: return createEqualOperator();
      case ModelPackage.DIS_EQUAL_OPERATOR: return createDisEqualOperator();
      case ModelPackage.GREATER_OPERATOR: return createGreaterOperator();
      case ModelPackage.GREATER_OR_EQUAL_OPERATOR: return createGreaterOrEqualOperator();
      case ModelPackage.MUL_DIV_EXPRESSION: return createMulDivExpression();
      case ModelPackage.MULTIPLICATION_OPERATOR: return createMultiplicationOperator();
      case ModelPackage.DIVISION_OPERATOR: return createDivisionOperator();
      case ModelPackage.ZERO_DIVISION_OPERATOR: return createZeroDivisionOperator();
      case ModelPackage.SUM_DIFF_EXPRESSION: return createSumDiffExpression();
      case ModelPackage.SUM_OPERATOR: return createSumOperator();
      case ModelPackage.DIFFERENCE_OPERATOR: return createDifferenceOperator();
      case ModelPackage.MODULO_EXPRESSION: return createModuloExpression();
      case ModelPackage.TRUE_LITERAL: return createTrueLiteral();
      case ModelPackage.FALSE_LITERAL: return createFalseLiteral();
      case ModelPackage.NOT_EXPRESSION: return createNotExpression();
      case ModelPackage.NEGATION_EXPRESSION: return createNegationExpression();
      case ModelPackage.CALL_EXPRESSION: return createCallExpression();
      case ModelPackage.MIN_EXPRESSION: return createMinExpression();
      case ModelPackage.MAX_EXPRESSION: return createMaxExpression();
      case ModelPackage.IF_THEN_ELSE_EXPRESSION: return createIfThenElseExpression();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Element createElement()
  {
    ElementImpl element = new ElementImpl();
    return element;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public quasylab.sibilla.lang.pm.model.System createSystem()
  {
    SystemImpl system = new SystemImpl();
    return system;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Constant createConstant()
  {
    ConstantImpl constant = new ConstantImpl();
    return constant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Macro createMacro()
  {
    MacroImpl macro = new MacroImpl();
    return macro;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Measure createMeasure()
  {
    MeasureImpl measure = new MeasureImpl();
    return measure;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ReferenceableElement createReferenceableElement()
  {
    ReferenceableElementImpl referenceableElement = new ReferenceableElementImpl();
    return referenceableElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Species createSpecies()
  {
    SpeciesImpl species = new SpeciesImpl();
    return species;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Rule createRule()
  {
    RuleImpl rule = new RuleImpl();
    return rule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Population createPopulation()
  {
    PopulationImpl population = new PopulationImpl();
    return population;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Multiplicity createMultiplicity()
  {
    MultiplicityImpl multiplicity = new MultiplicityImpl();
    return multiplicity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RelationOperator createRelationOperator()
  {
    RelationOperatorImpl relationOperator = new RelationOperatorImpl();
    return relationOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MulDivOperator createMulDivOperator()
  {
    MulDivOperatorImpl mulDivOperator = new MulDivOperatorImpl();
    return mulDivOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SumDiffOperator createSumDiffOperator()
  {
    SumDiffOperatorImpl sumDiffOperator = new SumDiffOperatorImpl();
    return sumDiffOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FractionOf createFractionOf()
  {
    FractionOfImpl fractionOf = new FractionOfImpl();
    return fractionOf;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NumberOf createNumberOf()
  {
    NumberOfImpl numberOf = new NumberOfImpl();
    return numberOf;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NumExpression createNumExpression()
  {
    NumExpressionImpl numExpression = new NumExpressionImpl();
    return numExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OrExpression createOrExpression()
  {
    OrExpressionImpl orExpression = new OrExpressionImpl();
    return orExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AndExpression createAndExpression()
  {
    AndExpressionImpl andExpression = new AndExpressionImpl();
    return andExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RelationExpression createRelationExpression()
  {
    RelationExpressionImpl relationExpression = new RelationExpressionImpl();
    return relationExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LessOperator createLessOperator()
  {
    LessOperatorImpl lessOperator = new LessOperatorImpl();
    return lessOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LessOrEqualOperator createLessOrEqualOperator()
  {
    LessOrEqualOperatorImpl lessOrEqualOperator = new LessOrEqualOperatorImpl();
    return lessOrEqualOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EqualOperator createEqualOperator()
  {
    EqualOperatorImpl equalOperator = new EqualOperatorImpl();
    return equalOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DisEqualOperator createDisEqualOperator()
  {
    DisEqualOperatorImpl disEqualOperator = new DisEqualOperatorImpl();
    return disEqualOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GreaterOperator createGreaterOperator()
  {
    GreaterOperatorImpl greaterOperator = new GreaterOperatorImpl();
    return greaterOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GreaterOrEqualOperator createGreaterOrEqualOperator()
  {
    GreaterOrEqualOperatorImpl greaterOrEqualOperator = new GreaterOrEqualOperatorImpl();
    return greaterOrEqualOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MulDivExpression createMulDivExpression()
  {
    MulDivExpressionImpl mulDivExpression = new MulDivExpressionImpl();
    return mulDivExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MultiplicationOperator createMultiplicationOperator()
  {
    MultiplicationOperatorImpl multiplicationOperator = new MultiplicationOperatorImpl();
    return multiplicationOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DivisionOperator createDivisionOperator()
  {
    DivisionOperatorImpl divisionOperator = new DivisionOperatorImpl();
    return divisionOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ZeroDivisionOperator createZeroDivisionOperator()
  {
    ZeroDivisionOperatorImpl zeroDivisionOperator = new ZeroDivisionOperatorImpl();
    return zeroDivisionOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SumDiffExpression createSumDiffExpression()
  {
    SumDiffExpressionImpl sumDiffExpression = new SumDiffExpressionImpl();
    return sumDiffExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SumOperator createSumOperator()
  {
    SumOperatorImpl sumOperator = new SumOperatorImpl();
    return sumOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DifferenceOperator createDifferenceOperator()
  {
    DifferenceOperatorImpl differenceOperator = new DifferenceOperatorImpl();
    return differenceOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ModuloExpression createModuloExpression()
  {
    ModuloExpressionImpl moduloExpression = new ModuloExpressionImpl();
    return moduloExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TrueLiteral createTrueLiteral()
  {
    TrueLiteralImpl trueLiteral = new TrueLiteralImpl();
    return trueLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FalseLiteral createFalseLiteral()
  {
    FalseLiteralImpl falseLiteral = new FalseLiteralImpl();
    return falseLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotExpression createNotExpression()
  {
    NotExpressionImpl notExpression = new NotExpressionImpl();
    return notExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NegationExpression createNegationExpression()
  {
    NegationExpressionImpl negationExpression = new NegationExpressionImpl();
    return negationExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CallExpression createCallExpression()
  {
    CallExpressionImpl callExpression = new CallExpressionImpl();
    return callExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MinExpression createMinExpression()
  {
    MinExpressionImpl minExpression = new MinExpressionImpl();
    return minExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MaxExpression createMaxExpression()
  {
    MaxExpressionImpl maxExpression = new MaxExpressionImpl();
    return maxExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IfThenElseExpression createIfThenElseExpression()
  {
    IfThenElseExpressionImpl ifThenElseExpression = new IfThenElseExpressionImpl();
    return ifThenElseExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ModelPackage getModelPackage()
  {
    return (ModelPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static ModelPackage getPackage()
  {
    return ModelPackage.eINSTANCE;
  }

} //ModelFactoryImpl

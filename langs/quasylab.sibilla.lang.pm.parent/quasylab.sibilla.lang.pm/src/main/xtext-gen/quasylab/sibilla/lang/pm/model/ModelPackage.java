/**
 * generated by Xtext 2.18.0.M3
 */
package quasylab.sibilla.lang.pm.model;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

/**
 * <!-- begin-user-doc -->
 * The <b>Package</b> for the model.
 * It contains accessors for the meta objects to represent
 * <ul>
 *   <li>each class,</li>
 *   <li>each feature of each class,</li>
 *   <li>each enum,</li>
 *   <li>and each data type</li>
 * </ul>
 * <!-- end-user-doc -->
 * @see quasylab.sibilla.lang.pm.model.ModelFactory
 * @model kind="package"
 * @generated
 */
public interface ModelPackage extends EPackage
{
  /**
   * The package name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  String eNAME = "model";

  /**
   * The package namespace URI.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  String eNS_URI = "http://www.sibilla.quasylab/lang/pm/Model";

  /**
   * The package namespace name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  String eNS_PREFIX = "model";

  /**
   * The singleton instance of the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  ModelPackage eINSTANCE = quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl.init();

  /**
   * The meta object id for the '{@link quasylab.sibilla.lang.pm.model.impl.ModelImpl <em>Model</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see quasylab.sibilla.lang.pm.model.impl.ModelImpl
   * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getModel()
   * @generated
   */
  int MODEL = 0;

  /**
   * The feature id for the '<em><b>Elements</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MODEL__ELEMENTS = 0;

  /**
   * The number of structural features of the '<em>Model</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MODEL_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link quasylab.sibilla.lang.pm.model.impl.ElementImpl <em>Element</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see quasylab.sibilla.lang.pm.model.impl.ElementImpl
   * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getElement()
   * @generated
   */
  int ELEMENT = 1;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ELEMENT__NAME = 0;

  /**
   * The number of structural features of the '<em>Element</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ELEMENT_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link quasylab.sibilla.lang.pm.model.impl.SystemImpl <em>System</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see quasylab.sibilla.lang.pm.model.impl.SystemImpl
   * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getSystem()
   * @generated
   */
  int SYSTEM = 2;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SYSTEM__NAME = ELEMENT__NAME;

  /**
   * The feature id for the '<em><b>Population</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SYSTEM__POPULATION = ELEMENT_FEATURE_COUNT + 0;

  /**
   * The number of structural features of the '<em>System</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SYSTEM_FEATURE_COUNT = ELEMENT_FEATURE_COUNT + 1;

  /**
   * The meta object id for the '{@link quasylab.sibilla.lang.pm.model.impl.ConstantImpl <em>Constant</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see quasylab.sibilla.lang.pm.model.impl.ConstantImpl
   * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getConstant()
   * @generated
   */
  int CONSTANT = 3;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONSTANT__NAME = ELEMENT__NAME;

  /**
   * The feature id for the '<em><b>Value</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONSTANT__VALUE = ELEMENT_FEATURE_COUNT + 0;

  /**
   * The number of structural features of the '<em>Constant</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONSTANT_FEATURE_COUNT = ELEMENT_FEATURE_COUNT + 1;

  /**
   * The meta object id for the '{@link quasylab.sibilla.lang.pm.model.impl.MacroImpl <em>Macro</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see quasylab.sibilla.lang.pm.model.impl.MacroImpl
   * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getMacro()
   * @generated
   */
  int MACRO = 4;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MACRO__NAME = ELEMENT__NAME;

  /**
   * The feature id for the '<em><b>Value</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MACRO__VALUE = ELEMENT_FEATURE_COUNT + 0;

  /**
   * The number of structural features of the '<em>Macro</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MACRO_FEATURE_COUNT = ELEMENT_FEATURE_COUNT + 1;

  /**
   * The meta object id for the '{@link quasylab.sibilla.lang.pm.model.impl.MeasureImpl <em>Measure</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see quasylab.sibilla.lang.pm.model.impl.MeasureImpl
   * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getMeasure()
   * @generated
   */
  int MEASURE = 5;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MEASURE__NAME = ELEMENT__NAME;

  /**
   * The feature id for the '<em><b>Value</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MEASURE__VALUE = ELEMENT_FEATURE_COUNT + 0;

  /**
   * The number of structural features of the '<em>Measure</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MEASURE_FEATURE_COUNT = ELEMENT_FEATURE_COUNT + 1;

  /**
   * The meta object id for the '{@link quasylab.sibilla.lang.pm.model.impl.ReferenceableElementImpl <em>Referenceable Element</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see quasylab.sibilla.lang.pm.model.impl.ReferenceableElementImpl
   * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getReferenceableElement()
   * @generated
   */
  int REFERENCEABLE_ELEMENT = 6;

  /**
   * The number of structural features of the '<em>Referenceable Element</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int REFERENCEABLE_ELEMENT_FEATURE_COUNT = 0;

  /**
   * The meta object id for the '{@link quasylab.sibilla.lang.pm.model.impl.SpeciesImpl <em>Species</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see quasylab.sibilla.lang.pm.model.impl.SpeciesImpl
   * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getSpecies()
   * @generated
   */
  int SPECIES = 7;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SPECIES__NAME = ELEMENT__NAME;

  /**
   * The number of structural features of the '<em>Species</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SPECIES_FEATURE_COUNT = ELEMENT_FEATURE_COUNT + 0;

  /**
   * The meta object id for the '{@link quasylab.sibilla.lang.pm.model.impl.RuleImpl <em>Rule</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see quasylab.sibilla.lang.pm.model.impl.RuleImpl
   * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getRule()
   * @generated
   */
  int RULE = 8;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int RULE__NAME = ELEMENT__NAME;

  /**
   * The feature id for the '<em><b>Guard</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int RULE__GUARD = ELEMENT_FEATURE_COUNT + 0;

  /**
   * The feature id for the '<em><b>Pre</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int RULE__PRE = ELEMENT_FEATURE_COUNT + 1;

  /**
   * The feature id for the '<em><b>Rate</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int RULE__RATE = ELEMENT_FEATURE_COUNT + 2;

  /**
   * The feature id for the '<em><b>Post</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int RULE__POST = ELEMENT_FEATURE_COUNT + 3;

  /**
   * The number of structural features of the '<em>Rule</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int RULE_FEATURE_COUNT = ELEMENT_FEATURE_COUNT + 4;

  /**
   * The meta object id for the '{@link quasylab.sibilla.lang.pm.model.impl.PopulationImpl <em>Population</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see quasylab.sibilla.lang.pm.model.impl.PopulationImpl
   * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getPopulation()
   * @generated
   */
  int POPULATION = 9;

  /**
   * The feature id for the '<em><b>Population</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int POPULATION__POPULATION = 0;

  /**
   * The number of structural features of the '<em>Population</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int POPULATION_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link quasylab.sibilla.lang.pm.model.impl.MultiplicityImpl <em>Multiplicity</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see quasylab.sibilla.lang.pm.model.impl.MultiplicityImpl
   * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getMultiplicity()
   * @generated
   */
  int MULTIPLICITY = 10;

  /**
   * The feature id for the '<em><b>Species</b></em>' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MULTIPLICITY__SPECIES = 0;

  /**
   * The feature id for the '<em><b>Size</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MULTIPLICITY__SIZE = 1;

  /**
   * The number of structural features of the '<em>Multiplicity</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MULTIPLICITY_FEATURE_COUNT = 2;

  /**
   * The meta object id for the '{@link quasylab.sibilla.lang.pm.model.impl.ExpressionImpl <em>Expression</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see quasylab.sibilla.lang.pm.model.impl.ExpressionImpl
   * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getExpression()
   * @generated
   */
  int EXPRESSION = 11;

  /**
   * The number of structural features of the '<em>Expression</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPRESSION_FEATURE_COUNT = 0;

  /**
   * The meta object id for the '{@link quasylab.sibilla.lang.pm.model.impl.RelationOperatorImpl <em>Relation Operator</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see quasylab.sibilla.lang.pm.model.impl.RelationOperatorImpl
   * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getRelationOperator()
   * @generated
   */
  int RELATION_OPERATOR = 12;

  /**
   * The number of structural features of the '<em>Relation Operator</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int RELATION_OPERATOR_FEATURE_COUNT = 0;

  /**
   * The meta object id for the '{@link quasylab.sibilla.lang.pm.model.impl.MulDivOperatorImpl <em>Mul Div Operator</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see quasylab.sibilla.lang.pm.model.impl.MulDivOperatorImpl
   * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getMulDivOperator()
   * @generated
   */
  int MUL_DIV_OPERATOR = 13;

  /**
   * The number of structural features of the '<em>Mul Div Operator</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MUL_DIV_OPERATOR_FEATURE_COUNT = 0;

  /**
   * The meta object id for the '{@link quasylab.sibilla.lang.pm.model.impl.SumDiffOperatorImpl <em>Sum Diff Operator</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see quasylab.sibilla.lang.pm.model.impl.SumDiffOperatorImpl
   * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getSumDiffOperator()
   * @generated
   */
  int SUM_DIFF_OPERATOR = 14;

  /**
   * The number of structural features of the '<em>Sum Diff Operator</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SUM_DIFF_OPERATOR_FEATURE_COUNT = 0;

  /**
   * The meta object id for the '{@link quasylab.sibilla.lang.pm.model.impl.FractionOfImpl <em>Fraction Of</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see quasylab.sibilla.lang.pm.model.impl.FractionOfImpl
   * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getFractionOf()
   * @generated
   */
  int FRACTION_OF = 15;

  /**
   * The feature id for the '<em><b>Agent</b></em>' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FRACTION_OF__AGENT = EXPRESSION_FEATURE_COUNT + 0;

  /**
   * The number of structural features of the '<em>Fraction Of</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FRACTION_OF_FEATURE_COUNT = EXPRESSION_FEATURE_COUNT + 1;

  /**
   * The meta object id for the '{@link quasylab.sibilla.lang.pm.model.impl.NumberOfImpl <em>Number Of</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see quasylab.sibilla.lang.pm.model.impl.NumberOfImpl
   * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getNumberOf()
   * @generated
   */
  int NUMBER_OF = 16;

  /**
   * The feature id for the '<em><b>Agent</b></em>' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int NUMBER_OF__AGENT = EXPRESSION_FEATURE_COUNT + 0;

  /**
   * The number of structural features of the '<em>Number Of</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int NUMBER_OF_FEATURE_COUNT = EXPRESSION_FEATURE_COUNT + 1;

  /**
   * The meta object id for the '{@link quasylab.sibilla.lang.pm.model.impl.NumExpressionImpl <em>Num Expression</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see quasylab.sibilla.lang.pm.model.impl.NumExpressionImpl
   * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getNumExpression()
   * @generated
   */
  int NUM_EXPRESSION = 17;

  /**
   * The feature id for the '<em><b>Int Part</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int NUM_EXPRESSION__INT_PART = EXPRESSION_FEATURE_COUNT + 0;

  /**
   * The feature id for the '<em><b>Is Real</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int NUM_EXPRESSION__IS_REAL = EXPRESSION_FEATURE_COUNT + 1;

  /**
   * The feature id for the '<em><b>Decimal Part</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int NUM_EXPRESSION__DECIMAL_PART = EXPRESSION_FEATURE_COUNT + 2;

  /**
   * The feature id for the '<em><b>Exponent</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int NUM_EXPRESSION__EXPONENT = EXPRESSION_FEATURE_COUNT + 3;

  /**
   * The number of structural features of the '<em>Num Expression</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int NUM_EXPRESSION_FEATURE_COUNT = EXPRESSION_FEATURE_COUNT + 4;

  /**
   * The meta object id for the '{@link quasylab.sibilla.lang.pm.model.impl.OrExpressionImpl <em>Or Expression</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see quasylab.sibilla.lang.pm.model.impl.OrExpressionImpl
   * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getOrExpression()
   * @generated
   */
  int OR_EXPRESSION = 18;

  /**
   * The feature id for the '<em><b>Left</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int OR_EXPRESSION__LEFT = EXPRESSION_FEATURE_COUNT + 0;

  /**
   * The feature id for the '<em><b>Right</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int OR_EXPRESSION__RIGHT = EXPRESSION_FEATURE_COUNT + 1;

  /**
   * The number of structural features of the '<em>Or Expression</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int OR_EXPRESSION_FEATURE_COUNT = EXPRESSION_FEATURE_COUNT + 2;

  /**
   * The meta object id for the '{@link quasylab.sibilla.lang.pm.model.impl.AndExpressionImpl <em>And Expression</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see quasylab.sibilla.lang.pm.model.impl.AndExpressionImpl
   * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getAndExpression()
   * @generated
   */
  int AND_EXPRESSION = 19;

  /**
   * The feature id for the '<em><b>Left</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int AND_EXPRESSION__LEFT = EXPRESSION_FEATURE_COUNT + 0;

  /**
   * The feature id for the '<em><b>Right</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int AND_EXPRESSION__RIGHT = EXPRESSION_FEATURE_COUNT + 1;

  /**
   * The number of structural features of the '<em>And Expression</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int AND_EXPRESSION_FEATURE_COUNT = EXPRESSION_FEATURE_COUNT + 2;

  /**
   * The meta object id for the '{@link quasylab.sibilla.lang.pm.model.impl.RelationExpressionImpl <em>Relation Expression</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see quasylab.sibilla.lang.pm.model.impl.RelationExpressionImpl
   * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getRelationExpression()
   * @generated
   */
  int RELATION_EXPRESSION = 20;

  /**
   * The feature id for the '<em><b>Left</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int RELATION_EXPRESSION__LEFT = EXPRESSION_FEATURE_COUNT + 0;

  /**
   * The feature id for the '<em><b>Op</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int RELATION_EXPRESSION__OP = EXPRESSION_FEATURE_COUNT + 1;

  /**
   * The feature id for the '<em><b>Right</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int RELATION_EXPRESSION__RIGHT = EXPRESSION_FEATURE_COUNT + 2;

  /**
   * The number of structural features of the '<em>Relation Expression</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int RELATION_EXPRESSION_FEATURE_COUNT = EXPRESSION_FEATURE_COUNT + 3;

  /**
   * The meta object id for the '{@link quasylab.sibilla.lang.pm.model.impl.LessOperatorImpl <em>Less Operator</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see quasylab.sibilla.lang.pm.model.impl.LessOperatorImpl
   * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getLessOperator()
   * @generated
   */
  int LESS_OPERATOR = 21;

  /**
   * The number of structural features of the '<em>Less Operator</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int LESS_OPERATOR_FEATURE_COUNT = RELATION_OPERATOR_FEATURE_COUNT + 0;

  /**
   * The meta object id for the '{@link quasylab.sibilla.lang.pm.model.impl.LessOrEqualOperatorImpl <em>Less Or Equal Operator</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see quasylab.sibilla.lang.pm.model.impl.LessOrEqualOperatorImpl
   * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getLessOrEqualOperator()
   * @generated
   */
  int LESS_OR_EQUAL_OPERATOR = 22;

  /**
   * The number of structural features of the '<em>Less Or Equal Operator</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int LESS_OR_EQUAL_OPERATOR_FEATURE_COUNT = RELATION_OPERATOR_FEATURE_COUNT + 0;

  /**
   * The meta object id for the '{@link quasylab.sibilla.lang.pm.model.impl.EqualOperatorImpl <em>Equal Operator</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see quasylab.sibilla.lang.pm.model.impl.EqualOperatorImpl
   * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getEqualOperator()
   * @generated
   */
  int EQUAL_OPERATOR = 23;

  /**
   * The number of structural features of the '<em>Equal Operator</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EQUAL_OPERATOR_FEATURE_COUNT = RELATION_OPERATOR_FEATURE_COUNT + 0;

  /**
   * The meta object id for the '{@link quasylab.sibilla.lang.pm.model.impl.DisEqualOperatorImpl <em>Dis Equal Operator</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see quasylab.sibilla.lang.pm.model.impl.DisEqualOperatorImpl
   * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getDisEqualOperator()
   * @generated
   */
  int DIS_EQUAL_OPERATOR = 24;

  /**
   * The number of structural features of the '<em>Dis Equal Operator</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int DIS_EQUAL_OPERATOR_FEATURE_COUNT = RELATION_OPERATOR_FEATURE_COUNT + 0;

  /**
   * The meta object id for the '{@link quasylab.sibilla.lang.pm.model.impl.GreaterOperatorImpl <em>Greater Operator</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see quasylab.sibilla.lang.pm.model.impl.GreaterOperatorImpl
   * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getGreaterOperator()
   * @generated
   */
  int GREATER_OPERATOR = 25;

  /**
   * The number of structural features of the '<em>Greater Operator</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int GREATER_OPERATOR_FEATURE_COUNT = RELATION_OPERATOR_FEATURE_COUNT + 0;

  /**
   * The meta object id for the '{@link quasylab.sibilla.lang.pm.model.impl.GreaterOrEqualOperatorImpl <em>Greater Or Equal Operator</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see quasylab.sibilla.lang.pm.model.impl.GreaterOrEqualOperatorImpl
   * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getGreaterOrEqualOperator()
   * @generated
   */
  int GREATER_OR_EQUAL_OPERATOR = 26;

  /**
   * The number of structural features of the '<em>Greater Or Equal Operator</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int GREATER_OR_EQUAL_OPERATOR_FEATURE_COUNT = RELATION_OPERATOR_FEATURE_COUNT + 0;

  /**
   * The meta object id for the '{@link quasylab.sibilla.lang.pm.model.impl.MulDivExpressionImpl <em>Mul Div Expression</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see quasylab.sibilla.lang.pm.model.impl.MulDivExpressionImpl
   * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getMulDivExpression()
   * @generated
   */
  int MUL_DIV_EXPRESSION = 27;

  /**
   * The feature id for the '<em><b>Left</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MUL_DIV_EXPRESSION__LEFT = EXPRESSION_FEATURE_COUNT + 0;

  /**
   * The feature id for the '<em><b>Op</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MUL_DIV_EXPRESSION__OP = EXPRESSION_FEATURE_COUNT + 1;

  /**
   * The feature id for the '<em><b>Right</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MUL_DIV_EXPRESSION__RIGHT = EXPRESSION_FEATURE_COUNT + 2;

  /**
   * The number of structural features of the '<em>Mul Div Expression</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MUL_DIV_EXPRESSION_FEATURE_COUNT = EXPRESSION_FEATURE_COUNT + 3;

  /**
   * The meta object id for the '{@link quasylab.sibilla.lang.pm.model.impl.MultiplicationOperatorImpl <em>Multiplication Operator</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see quasylab.sibilla.lang.pm.model.impl.MultiplicationOperatorImpl
   * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getMultiplicationOperator()
   * @generated
   */
  int MULTIPLICATION_OPERATOR = 28;

  /**
   * The number of structural features of the '<em>Multiplication Operator</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MULTIPLICATION_OPERATOR_FEATURE_COUNT = MUL_DIV_OPERATOR_FEATURE_COUNT + 0;

  /**
   * The meta object id for the '{@link quasylab.sibilla.lang.pm.model.impl.DivisionOperatorImpl <em>Division Operator</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see quasylab.sibilla.lang.pm.model.impl.DivisionOperatorImpl
   * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getDivisionOperator()
   * @generated
   */
  int DIVISION_OPERATOR = 29;

  /**
   * The number of structural features of the '<em>Division Operator</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int DIVISION_OPERATOR_FEATURE_COUNT = MUL_DIV_OPERATOR_FEATURE_COUNT + 0;

  /**
   * The meta object id for the '{@link quasylab.sibilla.lang.pm.model.impl.ZeroDivisionOperatorImpl <em>Zero Division Operator</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see quasylab.sibilla.lang.pm.model.impl.ZeroDivisionOperatorImpl
   * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getZeroDivisionOperator()
   * @generated
   */
  int ZERO_DIVISION_OPERATOR = 30;

  /**
   * The number of structural features of the '<em>Zero Division Operator</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ZERO_DIVISION_OPERATOR_FEATURE_COUNT = MUL_DIV_OPERATOR_FEATURE_COUNT + 0;

  /**
   * The meta object id for the '{@link quasylab.sibilla.lang.pm.model.impl.SumDiffExpressionImpl <em>Sum Diff Expression</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see quasylab.sibilla.lang.pm.model.impl.SumDiffExpressionImpl
   * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getSumDiffExpression()
   * @generated
   */
  int SUM_DIFF_EXPRESSION = 31;

  /**
   * The feature id for the '<em><b>Left</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SUM_DIFF_EXPRESSION__LEFT = EXPRESSION_FEATURE_COUNT + 0;

  /**
   * The feature id for the '<em><b>Op</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SUM_DIFF_EXPRESSION__OP = EXPRESSION_FEATURE_COUNT + 1;

  /**
   * The feature id for the '<em><b>Right</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SUM_DIFF_EXPRESSION__RIGHT = EXPRESSION_FEATURE_COUNT + 2;

  /**
   * The number of structural features of the '<em>Sum Diff Expression</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SUM_DIFF_EXPRESSION_FEATURE_COUNT = EXPRESSION_FEATURE_COUNT + 3;

  /**
   * The meta object id for the '{@link quasylab.sibilla.lang.pm.model.impl.SumOperatorImpl <em>Sum Operator</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see quasylab.sibilla.lang.pm.model.impl.SumOperatorImpl
   * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getSumOperator()
   * @generated
   */
  int SUM_OPERATOR = 32;

  /**
   * The number of structural features of the '<em>Sum Operator</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SUM_OPERATOR_FEATURE_COUNT = SUM_DIFF_OPERATOR_FEATURE_COUNT + 0;

  /**
   * The meta object id for the '{@link quasylab.sibilla.lang.pm.model.impl.DifferenceOperatorImpl <em>Difference Operator</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see quasylab.sibilla.lang.pm.model.impl.DifferenceOperatorImpl
   * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getDifferenceOperator()
   * @generated
   */
  int DIFFERENCE_OPERATOR = 33;

  /**
   * The number of structural features of the '<em>Difference Operator</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int DIFFERENCE_OPERATOR_FEATURE_COUNT = SUM_DIFF_OPERATOR_FEATURE_COUNT + 0;

  /**
   * The meta object id for the '{@link quasylab.sibilla.lang.pm.model.impl.ModuloExpressionImpl <em>Modulo Expression</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see quasylab.sibilla.lang.pm.model.impl.ModuloExpressionImpl
   * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getModuloExpression()
   * @generated
   */
  int MODULO_EXPRESSION = 34;

  /**
   * The feature id for the '<em><b>Left</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MODULO_EXPRESSION__LEFT = EXPRESSION_FEATURE_COUNT + 0;

  /**
   * The feature id for the '<em><b>Right</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MODULO_EXPRESSION__RIGHT = EXPRESSION_FEATURE_COUNT + 1;

  /**
   * The number of structural features of the '<em>Modulo Expression</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MODULO_EXPRESSION_FEATURE_COUNT = EXPRESSION_FEATURE_COUNT + 2;

  /**
   * The meta object id for the '{@link quasylab.sibilla.lang.pm.model.impl.TrueLiteralImpl <em>True Literal</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see quasylab.sibilla.lang.pm.model.impl.TrueLiteralImpl
   * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getTrueLiteral()
   * @generated
   */
  int TRUE_LITERAL = 35;

  /**
   * The number of structural features of the '<em>True Literal</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int TRUE_LITERAL_FEATURE_COUNT = EXPRESSION_FEATURE_COUNT + 0;

  /**
   * The meta object id for the '{@link quasylab.sibilla.lang.pm.model.impl.FalseLiteralImpl <em>False Literal</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see quasylab.sibilla.lang.pm.model.impl.FalseLiteralImpl
   * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getFalseLiteral()
   * @generated
   */
  int FALSE_LITERAL = 36;

  /**
   * The number of structural features of the '<em>False Literal</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FALSE_LITERAL_FEATURE_COUNT = EXPRESSION_FEATURE_COUNT + 0;

  /**
   * The meta object id for the '{@link quasylab.sibilla.lang.pm.model.impl.NotExpressionImpl <em>Not Expression</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see quasylab.sibilla.lang.pm.model.impl.NotExpressionImpl
   * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getNotExpression()
   * @generated
   */
  int NOT_EXPRESSION = 37;

  /**
   * The feature id for the '<em><b>Argument</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int NOT_EXPRESSION__ARGUMENT = EXPRESSION_FEATURE_COUNT + 0;

  /**
   * The number of structural features of the '<em>Not Expression</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int NOT_EXPRESSION_FEATURE_COUNT = EXPRESSION_FEATURE_COUNT + 1;

  /**
   * The meta object id for the '{@link quasylab.sibilla.lang.pm.model.impl.NegationExpressionImpl <em>Negation Expression</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see quasylab.sibilla.lang.pm.model.impl.NegationExpressionImpl
   * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getNegationExpression()
   * @generated
   */
  int NEGATION_EXPRESSION = 38;

  /**
   * The feature id for the '<em><b>Argument</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int NEGATION_EXPRESSION__ARGUMENT = EXPRESSION_FEATURE_COUNT + 0;

  /**
   * The number of structural features of the '<em>Negation Expression</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int NEGATION_EXPRESSION_FEATURE_COUNT = EXPRESSION_FEATURE_COUNT + 1;

  /**
   * The meta object id for the '{@link quasylab.sibilla.lang.pm.model.impl.CallExpressionImpl <em>Call Expression</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see quasylab.sibilla.lang.pm.model.impl.CallExpressionImpl
   * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getCallExpression()
   * @generated
   */
  int CALL_EXPRESSION = 39;

  /**
   * The feature id for the '<em><b>Symbol</b></em>' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CALL_EXPRESSION__SYMBOL = EXPRESSION_FEATURE_COUNT + 0;

  /**
   * The number of structural features of the '<em>Call Expression</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CALL_EXPRESSION_FEATURE_COUNT = EXPRESSION_FEATURE_COUNT + 1;

  /**
   * The meta object id for the '{@link quasylab.sibilla.lang.pm.model.impl.MinExpressionImpl <em>Min Expression</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see quasylab.sibilla.lang.pm.model.impl.MinExpressionImpl
   * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getMinExpression()
   * @generated
   */
  int MIN_EXPRESSION = 40;

  /**
   * The feature id for the '<em><b>Args</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MIN_EXPRESSION__ARGS = EXPRESSION_FEATURE_COUNT + 0;

  /**
   * The number of structural features of the '<em>Min Expression</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MIN_EXPRESSION_FEATURE_COUNT = EXPRESSION_FEATURE_COUNT + 1;

  /**
   * The meta object id for the '{@link quasylab.sibilla.lang.pm.model.impl.MaxExpressionImpl <em>Max Expression</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see quasylab.sibilla.lang.pm.model.impl.MaxExpressionImpl
   * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getMaxExpression()
   * @generated
   */
  int MAX_EXPRESSION = 41;

  /**
   * The feature id for the '<em><b>Args</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MAX_EXPRESSION__ARGS = EXPRESSION_FEATURE_COUNT + 0;

  /**
   * The number of structural features of the '<em>Max Expression</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MAX_EXPRESSION_FEATURE_COUNT = EXPRESSION_FEATURE_COUNT + 1;

  /**
   * The meta object id for the '{@link quasylab.sibilla.lang.pm.model.impl.IfThenElseExpressionImpl <em>If Then Else Expression</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see quasylab.sibilla.lang.pm.model.impl.IfThenElseExpressionImpl
   * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getIfThenElseExpression()
   * @generated
   */
  int IF_THEN_ELSE_EXPRESSION = 42;

  /**
   * The feature id for the '<em><b>Guard</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int IF_THEN_ELSE_EXPRESSION__GUARD = EXPRESSION_FEATURE_COUNT + 0;

  /**
   * The feature id for the '<em><b>If Branch</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int IF_THEN_ELSE_EXPRESSION__IF_BRANCH = EXPRESSION_FEATURE_COUNT + 1;

  /**
   * The feature id for the '<em><b>Else Branch</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int IF_THEN_ELSE_EXPRESSION__ELSE_BRANCH = EXPRESSION_FEATURE_COUNT + 2;

  /**
   * The number of structural features of the '<em>If Then Else Expression</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int IF_THEN_ELSE_EXPRESSION_FEATURE_COUNT = EXPRESSION_FEATURE_COUNT + 3;


  /**
   * Returns the meta object for class '{@link quasylab.sibilla.lang.pm.model.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Model</em>'.
   * @see quasylab.sibilla.lang.pm.model.Model
   * @generated
   */
  EClass getModel();

  /**
   * Returns the meta object for the containment reference list '{@link quasylab.sibilla.lang.pm.model.Model#getElements <em>Elements</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Elements</em>'.
   * @see quasylab.sibilla.lang.pm.model.Model#getElements()
   * @see #getModel()
   * @generated
   */
  EReference getModel_Elements();

  /**
   * Returns the meta object for class '{@link quasylab.sibilla.lang.pm.model.Element <em>Element</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Element</em>'.
   * @see quasylab.sibilla.lang.pm.model.Element
   * @generated
   */
  EClass getElement();

  /**
   * Returns the meta object for the attribute '{@link quasylab.sibilla.lang.pm.model.Element#getName <em>Name</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Name</em>'.
   * @see quasylab.sibilla.lang.pm.model.Element#getName()
   * @see #getElement()
   * @generated
   */
  EAttribute getElement_Name();

  /**
   * Returns the meta object for class '{@link quasylab.sibilla.lang.pm.model.System <em>System</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>System</em>'.
   * @see quasylab.sibilla.lang.pm.model.System
   * @generated
   */
  EClass getSystem();

  /**
   * Returns the meta object for the containment reference '{@link quasylab.sibilla.lang.pm.model.System#getPopulation <em>Population</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Population</em>'.
   * @see quasylab.sibilla.lang.pm.model.System#getPopulation()
   * @see #getSystem()
   * @generated
   */
  EReference getSystem_Population();

  /**
   * Returns the meta object for class '{@link quasylab.sibilla.lang.pm.model.Constant <em>Constant</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Constant</em>'.
   * @see quasylab.sibilla.lang.pm.model.Constant
   * @generated
   */
  EClass getConstant();

  /**
   * Returns the meta object for the containment reference '{@link quasylab.sibilla.lang.pm.model.Constant#getValue <em>Value</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Value</em>'.
   * @see quasylab.sibilla.lang.pm.model.Constant#getValue()
   * @see #getConstant()
   * @generated
   */
  EReference getConstant_Value();

  /**
   * Returns the meta object for class '{@link quasylab.sibilla.lang.pm.model.Macro <em>Macro</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Macro</em>'.
   * @see quasylab.sibilla.lang.pm.model.Macro
   * @generated
   */
  EClass getMacro();

  /**
   * Returns the meta object for the containment reference '{@link quasylab.sibilla.lang.pm.model.Macro#getValue <em>Value</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Value</em>'.
   * @see quasylab.sibilla.lang.pm.model.Macro#getValue()
   * @see #getMacro()
   * @generated
   */
  EReference getMacro_Value();

  /**
   * Returns the meta object for class '{@link quasylab.sibilla.lang.pm.model.Measure <em>Measure</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Measure</em>'.
   * @see quasylab.sibilla.lang.pm.model.Measure
   * @generated
   */
  EClass getMeasure();

  /**
   * Returns the meta object for the containment reference '{@link quasylab.sibilla.lang.pm.model.Measure#getValue <em>Value</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Value</em>'.
   * @see quasylab.sibilla.lang.pm.model.Measure#getValue()
   * @see #getMeasure()
   * @generated
   */
  EReference getMeasure_Value();

  /**
   * Returns the meta object for class '{@link quasylab.sibilla.lang.pm.model.ReferenceableElement <em>Referenceable Element</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Referenceable Element</em>'.
   * @see quasylab.sibilla.lang.pm.model.ReferenceableElement
   * @generated
   */
  EClass getReferenceableElement();

  /**
   * Returns the meta object for class '{@link quasylab.sibilla.lang.pm.model.Species <em>Species</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Species</em>'.
   * @see quasylab.sibilla.lang.pm.model.Species
   * @generated
   */
  EClass getSpecies();

  /**
   * Returns the meta object for class '{@link quasylab.sibilla.lang.pm.model.Rule <em>Rule</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Rule</em>'.
   * @see quasylab.sibilla.lang.pm.model.Rule
   * @generated
   */
  EClass getRule();

  /**
   * Returns the meta object for the containment reference '{@link quasylab.sibilla.lang.pm.model.Rule#getGuard <em>Guard</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Guard</em>'.
   * @see quasylab.sibilla.lang.pm.model.Rule#getGuard()
   * @see #getRule()
   * @generated
   */
  EReference getRule_Guard();

  /**
   * Returns the meta object for the containment reference '{@link quasylab.sibilla.lang.pm.model.Rule#getPre <em>Pre</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Pre</em>'.
   * @see quasylab.sibilla.lang.pm.model.Rule#getPre()
   * @see #getRule()
   * @generated
   */
  EReference getRule_Pre();

  /**
   * Returns the meta object for the containment reference '{@link quasylab.sibilla.lang.pm.model.Rule#getRate <em>Rate</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Rate</em>'.
   * @see quasylab.sibilla.lang.pm.model.Rule#getRate()
   * @see #getRule()
   * @generated
   */
  EReference getRule_Rate();

  /**
   * Returns the meta object for the containment reference '{@link quasylab.sibilla.lang.pm.model.Rule#getPost <em>Post</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Post</em>'.
   * @see quasylab.sibilla.lang.pm.model.Rule#getPost()
   * @see #getRule()
   * @generated
   */
  EReference getRule_Post();

  /**
   * Returns the meta object for class '{@link quasylab.sibilla.lang.pm.model.Population <em>Population</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Population</em>'.
   * @see quasylab.sibilla.lang.pm.model.Population
   * @generated
   */
  EClass getPopulation();

  /**
   * Returns the meta object for the containment reference list '{@link quasylab.sibilla.lang.pm.model.Population#getPopulation <em>Population</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Population</em>'.
   * @see quasylab.sibilla.lang.pm.model.Population#getPopulation()
   * @see #getPopulation()
   * @generated
   */
  EReference getPopulation_Population();

  /**
   * Returns the meta object for class '{@link quasylab.sibilla.lang.pm.model.Multiplicity <em>Multiplicity</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Multiplicity</em>'.
   * @see quasylab.sibilla.lang.pm.model.Multiplicity
   * @generated
   */
  EClass getMultiplicity();

  /**
   * Returns the meta object for the reference '{@link quasylab.sibilla.lang.pm.model.Multiplicity#getSpecies <em>Species</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the reference '<em>Species</em>'.
   * @see quasylab.sibilla.lang.pm.model.Multiplicity#getSpecies()
   * @see #getMultiplicity()
   * @generated
   */
  EReference getMultiplicity_Species();

  /**
   * Returns the meta object for the containment reference '{@link quasylab.sibilla.lang.pm.model.Multiplicity#getSize <em>Size</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Size</em>'.
   * @see quasylab.sibilla.lang.pm.model.Multiplicity#getSize()
   * @see #getMultiplicity()
   * @generated
   */
  EReference getMultiplicity_Size();

  /**
   * Returns the meta object for class '{@link quasylab.sibilla.lang.pm.model.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Expression</em>'.
   * @see quasylab.sibilla.lang.pm.model.Expression
   * @generated
   */
  EClass getExpression();

  /**
   * Returns the meta object for class '{@link quasylab.sibilla.lang.pm.model.RelationOperator <em>Relation Operator</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Relation Operator</em>'.
   * @see quasylab.sibilla.lang.pm.model.RelationOperator
   * @generated
   */
  EClass getRelationOperator();

  /**
   * Returns the meta object for class '{@link quasylab.sibilla.lang.pm.model.MulDivOperator <em>Mul Div Operator</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Mul Div Operator</em>'.
   * @see quasylab.sibilla.lang.pm.model.MulDivOperator
   * @generated
   */
  EClass getMulDivOperator();

  /**
   * Returns the meta object for class '{@link quasylab.sibilla.lang.pm.model.SumDiffOperator <em>Sum Diff Operator</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Sum Diff Operator</em>'.
   * @see quasylab.sibilla.lang.pm.model.SumDiffOperator
   * @generated
   */
  EClass getSumDiffOperator();

  /**
   * Returns the meta object for class '{@link quasylab.sibilla.lang.pm.model.FractionOf <em>Fraction Of</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Fraction Of</em>'.
   * @see quasylab.sibilla.lang.pm.model.FractionOf
   * @generated
   */
  EClass getFractionOf();

  /**
   * Returns the meta object for the reference '{@link quasylab.sibilla.lang.pm.model.FractionOf#getAgent <em>Agent</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the reference '<em>Agent</em>'.
   * @see quasylab.sibilla.lang.pm.model.FractionOf#getAgent()
   * @see #getFractionOf()
   * @generated
   */
  EReference getFractionOf_Agent();

  /**
   * Returns the meta object for class '{@link quasylab.sibilla.lang.pm.model.NumberOf <em>Number Of</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Number Of</em>'.
   * @see quasylab.sibilla.lang.pm.model.NumberOf
   * @generated
   */
  EClass getNumberOf();

  /**
   * Returns the meta object for the reference '{@link quasylab.sibilla.lang.pm.model.NumberOf#getAgent <em>Agent</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the reference '<em>Agent</em>'.
   * @see quasylab.sibilla.lang.pm.model.NumberOf#getAgent()
   * @see #getNumberOf()
   * @generated
   */
  EReference getNumberOf_Agent();

  /**
   * Returns the meta object for class '{@link quasylab.sibilla.lang.pm.model.NumExpression <em>Num Expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Num Expression</em>'.
   * @see quasylab.sibilla.lang.pm.model.NumExpression
   * @generated
   */
  EClass getNumExpression();

  /**
   * Returns the meta object for the attribute '{@link quasylab.sibilla.lang.pm.model.NumExpression#getIntPart <em>Int Part</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Int Part</em>'.
   * @see quasylab.sibilla.lang.pm.model.NumExpression#getIntPart()
   * @see #getNumExpression()
   * @generated
   */
  EAttribute getNumExpression_IntPart();

  /**
   * Returns the meta object for the attribute '{@link quasylab.sibilla.lang.pm.model.NumExpression#isIsReal <em>Is Real</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Is Real</em>'.
   * @see quasylab.sibilla.lang.pm.model.NumExpression#isIsReal()
   * @see #getNumExpression()
   * @generated
   */
  EAttribute getNumExpression_IsReal();

  /**
   * Returns the meta object for the attribute '{@link quasylab.sibilla.lang.pm.model.NumExpression#getDecimalPart <em>Decimal Part</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Decimal Part</em>'.
   * @see quasylab.sibilla.lang.pm.model.NumExpression#getDecimalPart()
   * @see #getNumExpression()
   * @generated
   */
  EAttribute getNumExpression_DecimalPart();

  /**
   * Returns the meta object for the attribute '{@link quasylab.sibilla.lang.pm.model.NumExpression#getExponent <em>Exponent</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Exponent</em>'.
   * @see quasylab.sibilla.lang.pm.model.NumExpression#getExponent()
   * @see #getNumExpression()
   * @generated
   */
  EAttribute getNumExpression_Exponent();

  /**
   * Returns the meta object for class '{@link quasylab.sibilla.lang.pm.model.OrExpression <em>Or Expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Or Expression</em>'.
   * @see quasylab.sibilla.lang.pm.model.OrExpression
   * @generated
   */
  EClass getOrExpression();

  /**
   * Returns the meta object for the containment reference '{@link quasylab.sibilla.lang.pm.model.OrExpression#getLeft <em>Left</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Left</em>'.
   * @see quasylab.sibilla.lang.pm.model.OrExpression#getLeft()
   * @see #getOrExpression()
   * @generated
   */
  EReference getOrExpression_Left();

  /**
   * Returns the meta object for the containment reference '{@link quasylab.sibilla.lang.pm.model.OrExpression#getRight <em>Right</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Right</em>'.
   * @see quasylab.sibilla.lang.pm.model.OrExpression#getRight()
   * @see #getOrExpression()
   * @generated
   */
  EReference getOrExpression_Right();

  /**
   * Returns the meta object for class '{@link quasylab.sibilla.lang.pm.model.AndExpression <em>And Expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>And Expression</em>'.
   * @see quasylab.sibilla.lang.pm.model.AndExpression
   * @generated
   */
  EClass getAndExpression();

  /**
   * Returns the meta object for the containment reference '{@link quasylab.sibilla.lang.pm.model.AndExpression#getLeft <em>Left</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Left</em>'.
   * @see quasylab.sibilla.lang.pm.model.AndExpression#getLeft()
   * @see #getAndExpression()
   * @generated
   */
  EReference getAndExpression_Left();

  /**
   * Returns the meta object for the containment reference '{@link quasylab.sibilla.lang.pm.model.AndExpression#getRight <em>Right</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Right</em>'.
   * @see quasylab.sibilla.lang.pm.model.AndExpression#getRight()
   * @see #getAndExpression()
   * @generated
   */
  EReference getAndExpression_Right();

  /**
   * Returns the meta object for class '{@link quasylab.sibilla.lang.pm.model.RelationExpression <em>Relation Expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Relation Expression</em>'.
   * @see quasylab.sibilla.lang.pm.model.RelationExpression
   * @generated
   */
  EClass getRelationExpression();

  /**
   * Returns the meta object for the containment reference '{@link quasylab.sibilla.lang.pm.model.RelationExpression#getLeft <em>Left</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Left</em>'.
   * @see quasylab.sibilla.lang.pm.model.RelationExpression#getLeft()
   * @see #getRelationExpression()
   * @generated
   */
  EReference getRelationExpression_Left();

  /**
   * Returns the meta object for the containment reference '{@link quasylab.sibilla.lang.pm.model.RelationExpression#getOp <em>Op</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Op</em>'.
   * @see quasylab.sibilla.lang.pm.model.RelationExpression#getOp()
   * @see #getRelationExpression()
   * @generated
   */
  EReference getRelationExpression_Op();

  /**
   * Returns the meta object for the containment reference '{@link quasylab.sibilla.lang.pm.model.RelationExpression#getRight <em>Right</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Right</em>'.
   * @see quasylab.sibilla.lang.pm.model.RelationExpression#getRight()
   * @see #getRelationExpression()
   * @generated
   */
  EReference getRelationExpression_Right();

  /**
   * Returns the meta object for class '{@link quasylab.sibilla.lang.pm.model.LessOperator <em>Less Operator</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Less Operator</em>'.
   * @see quasylab.sibilla.lang.pm.model.LessOperator
   * @generated
   */
  EClass getLessOperator();

  /**
   * Returns the meta object for class '{@link quasylab.sibilla.lang.pm.model.LessOrEqualOperator <em>Less Or Equal Operator</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Less Or Equal Operator</em>'.
   * @see quasylab.sibilla.lang.pm.model.LessOrEqualOperator
   * @generated
   */
  EClass getLessOrEqualOperator();

  /**
   * Returns the meta object for class '{@link quasylab.sibilla.lang.pm.model.EqualOperator <em>Equal Operator</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Equal Operator</em>'.
   * @see quasylab.sibilla.lang.pm.model.EqualOperator
   * @generated
   */
  EClass getEqualOperator();

  /**
   * Returns the meta object for class '{@link quasylab.sibilla.lang.pm.model.DisEqualOperator <em>Dis Equal Operator</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Dis Equal Operator</em>'.
   * @see quasylab.sibilla.lang.pm.model.DisEqualOperator
   * @generated
   */
  EClass getDisEqualOperator();

  /**
   * Returns the meta object for class '{@link quasylab.sibilla.lang.pm.model.GreaterOperator <em>Greater Operator</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Greater Operator</em>'.
   * @see quasylab.sibilla.lang.pm.model.GreaterOperator
   * @generated
   */
  EClass getGreaterOperator();

  /**
   * Returns the meta object for class '{@link quasylab.sibilla.lang.pm.model.GreaterOrEqualOperator <em>Greater Or Equal Operator</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Greater Or Equal Operator</em>'.
   * @see quasylab.sibilla.lang.pm.model.GreaterOrEqualOperator
   * @generated
   */
  EClass getGreaterOrEqualOperator();

  /**
   * Returns the meta object for class '{@link quasylab.sibilla.lang.pm.model.MulDivExpression <em>Mul Div Expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Mul Div Expression</em>'.
   * @see quasylab.sibilla.lang.pm.model.MulDivExpression
   * @generated
   */
  EClass getMulDivExpression();

  /**
   * Returns the meta object for the containment reference '{@link quasylab.sibilla.lang.pm.model.MulDivExpression#getLeft <em>Left</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Left</em>'.
   * @see quasylab.sibilla.lang.pm.model.MulDivExpression#getLeft()
   * @see #getMulDivExpression()
   * @generated
   */
  EReference getMulDivExpression_Left();

  /**
   * Returns the meta object for the containment reference '{@link quasylab.sibilla.lang.pm.model.MulDivExpression#getOp <em>Op</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Op</em>'.
   * @see quasylab.sibilla.lang.pm.model.MulDivExpression#getOp()
   * @see #getMulDivExpression()
   * @generated
   */
  EReference getMulDivExpression_Op();

  /**
   * Returns the meta object for the containment reference '{@link quasylab.sibilla.lang.pm.model.MulDivExpression#getRight <em>Right</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Right</em>'.
   * @see quasylab.sibilla.lang.pm.model.MulDivExpression#getRight()
   * @see #getMulDivExpression()
   * @generated
   */
  EReference getMulDivExpression_Right();

  /**
   * Returns the meta object for class '{@link quasylab.sibilla.lang.pm.model.MultiplicationOperator <em>Multiplication Operator</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Multiplication Operator</em>'.
   * @see quasylab.sibilla.lang.pm.model.MultiplicationOperator
   * @generated
   */
  EClass getMultiplicationOperator();

  /**
   * Returns the meta object for class '{@link quasylab.sibilla.lang.pm.model.DivisionOperator <em>Division Operator</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Division Operator</em>'.
   * @see quasylab.sibilla.lang.pm.model.DivisionOperator
   * @generated
   */
  EClass getDivisionOperator();

  /**
   * Returns the meta object for class '{@link quasylab.sibilla.lang.pm.model.ZeroDivisionOperator <em>Zero Division Operator</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Zero Division Operator</em>'.
   * @see quasylab.sibilla.lang.pm.model.ZeroDivisionOperator
   * @generated
   */
  EClass getZeroDivisionOperator();

  /**
   * Returns the meta object for class '{@link quasylab.sibilla.lang.pm.model.SumDiffExpression <em>Sum Diff Expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Sum Diff Expression</em>'.
   * @see quasylab.sibilla.lang.pm.model.SumDiffExpression
   * @generated
   */
  EClass getSumDiffExpression();

  /**
   * Returns the meta object for the containment reference '{@link quasylab.sibilla.lang.pm.model.SumDiffExpression#getLeft <em>Left</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Left</em>'.
   * @see quasylab.sibilla.lang.pm.model.SumDiffExpression#getLeft()
   * @see #getSumDiffExpression()
   * @generated
   */
  EReference getSumDiffExpression_Left();

  /**
   * Returns the meta object for the containment reference '{@link quasylab.sibilla.lang.pm.model.SumDiffExpression#getOp <em>Op</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Op</em>'.
   * @see quasylab.sibilla.lang.pm.model.SumDiffExpression#getOp()
   * @see #getSumDiffExpression()
   * @generated
   */
  EReference getSumDiffExpression_Op();

  /**
   * Returns the meta object for the containment reference '{@link quasylab.sibilla.lang.pm.model.SumDiffExpression#getRight <em>Right</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Right</em>'.
   * @see quasylab.sibilla.lang.pm.model.SumDiffExpression#getRight()
   * @see #getSumDiffExpression()
   * @generated
   */
  EReference getSumDiffExpression_Right();

  /**
   * Returns the meta object for class '{@link quasylab.sibilla.lang.pm.model.SumOperator <em>Sum Operator</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Sum Operator</em>'.
   * @see quasylab.sibilla.lang.pm.model.SumOperator
   * @generated
   */
  EClass getSumOperator();

  /**
   * Returns the meta object for class '{@link quasylab.sibilla.lang.pm.model.DifferenceOperator <em>Difference Operator</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Difference Operator</em>'.
   * @see quasylab.sibilla.lang.pm.model.DifferenceOperator
   * @generated
   */
  EClass getDifferenceOperator();

  /**
   * Returns the meta object for class '{@link quasylab.sibilla.lang.pm.model.ModuloExpression <em>Modulo Expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Modulo Expression</em>'.
   * @see quasylab.sibilla.lang.pm.model.ModuloExpression
   * @generated
   */
  EClass getModuloExpression();

  /**
   * Returns the meta object for the containment reference '{@link quasylab.sibilla.lang.pm.model.ModuloExpression#getLeft <em>Left</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Left</em>'.
   * @see quasylab.sibilla.lang.pm.model.ModuloExpression#getLeft()
   * @see #getModuloExpression()
   * @generated
   */
  EReference getModuloExpression_Left();

  /**
   * Returns the meta object for the containment reference '{@link quasylab.sibilla.lang.pm.model.ModuloExpression#getRight <em>Right</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Right</em>'.
   * @see quasylab.sibilla.lang.pm.model.ModuloExpression#getRight()
   * @see #getModuloExpression()
   * @generated
   */
  EReference getModuloExpression_Right();

  /**
   * Returns the meta object for class '{@link quasylab.sibilla.lang.pm.model.TrueLiteral <em>True Literal</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>True Literal</em>'.
   * @see quasylab.sibilla.lang.pm.model.TrueLiteral
   * @generated
   */
  EClass getTrueLiteral();

  /**
   * Returns the meta object for class '{@link quasylab.sibilla.lang.pm.model.FalseLiteral <em>False Literal</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>False Literal</em>'.
   * @see quasylab.sibilla.lang.pm.model.FalseLiteral
   * @generated
   */
  EClass getFalseLiteral();

  /**
   * Returns the meta object for class '{@link quasylab.sibilla.lang.pm.model.NotExpression <em>Not Expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Not Expression</em>'.
   * @see quasylab.sibilla.lang.pm.model.NotExpression
   * @generated
   */
  EClass getNotExpression();

  /**
   * Returns the meta object for the containment reference '{@link quasylab.sibilla.lang.pm.model.NotExpression#getArgument <em>Argument</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Argument</em>'.
   * @see quasylab.sibilla.lang.pm.model.NotExpression#getArgument()
   * @see #getNotExpression()
   * @generated
   */
  EReference getNotExpression_Argument();

  /**
   * Returns the meta object for class '{@link quasylab.sibilla.lang.pm.model.NegationExpression <em>Negation Expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Negation Expression</em>'.
   * @see quasylab.sibilla.lang.pm.model.NegationExpression
   * @generated
   */
  EClass getNegationExpression();

  /**
   * Returns the meta object for the containment reference '{@link quasylab.sibilla.lang.pm.model.NegationExpression#getArgument <em>Argument</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Argument</em>'.
   * @see quasylab.sibilla.lang.pm.model.NegationExpression#getArgument()
   * @see #getNegationExpression()
   * @generated
   */
  EReference getNegationExpression_Argument();

  /**
   * Returns the meta object for class '{@link quasylab.sibilla.lang.pm.model.CallExpression <em>Call Expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Call Expression</em>'.
   * @see quasylab.sibilla.lang.pm.model.CallExpression
   * @generated
   */
  EClass getCallExpression();

  /**
   * Returns the meta object for the reference '{@link quasylab.sibilla.lang.pm.model.CallExpression#getSymbol <em>Symbol</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the reference '<em>Symbol</em>'.
   * @see quasylab.sibilla.lang.pm.model.CallExpression#getSymbol()
   * @see #getCallExpression()
   * @generated
   */
  EReference getCallExpression_Symbol();

  /**
   * Returns the meta object for class '{@link quasylab.sibilla.lang.pm.model.MinExpression <em>Min Expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Min Expression</em>'.
   * @see quasylab.sibilla.lang.pm.model.MinExpression
   * @generated
   */
  EClass getMinExpression();

  /**
   * Returns the meta object for the containment reference list '{@link quasylab.sibilla.lang.pm.model.MinExpression#getArgs <em>Args</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Args</em>'.
   * @see quasylab.sibilla.lang.pm.model.MinExpression#getArgs()
   * @see #getMinExpression()
   * @generated
   */
  EReference getMinExpression_Args();

  /**
   * Returns the meta object for class '{@link quasylab.sibilla.lang.pm.model.MaxExpression <em>Max Expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Max Expression</em>'.
   * @see quasylab.sibilla.lang.pm.model.MaxExpression
   * @generated
   */
  EClass getMaxExpression();

  /**
   * Returns the meta object for the containment reference list '{@link quasylab.sibilla.lang.pm.model.MaxExpression#getArgs <em>Args</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Args</em>'.
   * @see quasylab.sibilla.lang.pm.model.MaxExpression#getArgs()
   * @see #getMaxExpression()
   * @generated
   */
  EReference getMaxExpression_Args();

  /**
   * Returns the meta object for class '{@link quasylab.sibilla.lang.pm.model.IfThenElseExpression <em>If Then Else Expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>If Then Else Expression</em>'.
   * @see quasylab.sibilla.lang.pm.model.IfThenElseExpression
   * @generated
   */
  EClass getIfThenElseExpression();

  /**
   * Returns the meta object for the containment reference '{@link quasylab.sibilla.lang.pm.model.IfThenElseExpression#getGuard <em>Guard</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Guard</em>'.
   * @see quasylab.sibilla.lang.pm.model.IfThenElseExpression#getGuard()
   * @see #getIfThenElseExpression()
   * @generated
   */
  EReference getIfThenElseExpression_Guard();

  /**
   * Returns the meta object for the containment reference '{@link quasylab.sibilla.lang.pm.model.IfThenElseExpression#getIfBranch <em>If Branch</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>If Branch</em>'.
   * @see quasylab.sibilla.lang.pm.model.IfThenElseExpression#getIfBranch()
   * @see #getIfThenElseExpression()
   * @generated
   */
  EReference getIfThenElseExpression_IfBranch();

  /**
   * Returns the meta object for the containment reference '{@link quasylab.sibilla.lang.pm.model.IfThenElseExpression#getElseBranch <em>Else Branch</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Else Branch</em>'.
   * @see quasylab.sibilla.lang.pm.model.IfThenElseExpression#getElseBranch()
   * @see #getIfThenElseExpression()
   * @generated
   */
  EReference getIfThenElseExpression_ElseBranch();

  /**
   * Returns the factory that creates the instances of the model.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the factory that creates the instances of the model.
   * @generated
   */
  ModelFactory getModelFactory();

  /**
   * <!-- begin-user-doc -->
   * Defines literals for the meta objects that represent
   * <ul>
   *   <li>each class,</li>
   *   <li>each feature of each class,</li>
   *   <li>each enum,</li>
   *   <li>and each data type</li>
   * </ul>
   * <!-- end-user-doc -->
   * @generated
   */
  interface Literals
  {
    /**
     * The meta object literal for the '{@link quasylab.sibilla.lang.pm.model.impl.ModelImpl <em>Model</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see quasylab.sibilla.lang.pm.model.impl.ModelImpl
     * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getModel()
     * @generated
     */
    EClass MODEL = eINSTANCE.getModel();

    /**
     * The meta object literal for the '<em><b>Elements</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference MODEL__ELEMENTS = eINSTANCE.getModel_Elements();

    /**
     * The meta object literal for the '{@link quasylab.sibilla.lang.pm.model.impl.ElementImpl <em>Element</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see quasylab.sibilla.lang.pm.model.impl.ElementImpl
     * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getElement()
     * @generated
     */
    EClass ELEMENT = eINSTANCE.getElement();

    /**
     * The meta object literal for the '<em><b>Name</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute ELEMENT__NAME = eINSTANCE.getElement_Name();

    /**
     * The meta object literal for the '{@link quasylab.sibilla.lang.pm.model.impl.SystemImpl <em>System</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see quasylab.sibilla.lang.pm.model.impl.SystemImpl
     * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getSystem()
     * @generated
     */
    EClass SYSTEM = eINSTANCE.getSystem();

    /**
     * The meta object literal for the '<em><b>Population</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference SYSTEM__POPULATION = eINSTANCE.getSystem_Population();

    /**
     * The meta object literal for the '{@link quasylab.sibilla.lang.pm.model.impl.ConstantImpl <em>Constant</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see quasylab.sibilla.lang.pm.model.impl.ConstantImpl
     * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getConstant()
     * @generated
     */
    EClass CONSTANT = eINSTANCE.getConstant();

    /**
     * The meta object literal for the '<em><b>Value</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference CONSTANT__VALUE = eINSTANCE.getConstant_Value();

    /**
     * The meta object literal for the '{@link quasylab.sibilla.lang.pm.model.impl.MacroImpl <em>Macro</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see quasylab.sibilla.lang.pm.model.impl.MacroImpl
     * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getMacro()
     * @generated
     */
    EClass MACRO = eINSTANCE.getMacro();

    /**
     * The meta object literal for the '<em><b>Value</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference MACRO__VALUE = eINSTANCE.getMacro_Value();

    /**
     * The meta object literal for the '{@link quasylab.sibilla.lang.pm.model.impl.MeasureImpl <em>Measure</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see quasylab.sibilla.lang.pm.model.impl.MeasureImpl
     * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getMeasure()
     * @generated
     */
    EClass MEASURE = eINSTANCE.getMeasure();

    /**
     * The meta object literal for the '<em><b>Value</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference MEASURE__VALUE = eINSTANCE.getMeasure_Value();

    /**
     * The meta object literal for the '{@link quasylab.sibilla.lang.pm.model.impl.ReferenceableElementImpl <em>Referenceable Element</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see quasylab.sibilla.lang.pm.model.impl.ReferenceableElementImpl
     * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getReferenceableElement()
     * @generated
     */
    EClass REFERENCEABLE_ELEMENT = eINSTANCE.getReferenceableElement();

    /**
     * The meta object literal for the '{@link quasylab.sibilla.lang.pm.model.impl.SpeciesImpl <em>Species</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see quasylab.sibilla.lang.pm.model.impl.SpeciesImpl
     * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getSpecies()
     * @generated
     */
    EClass SPECIES = eINSTANCE.getSpecies();

    /**
     * The meta object literal for the '{@link quasylab.sibilla.lang.pm.model.impl.RuleImpl <em>Rule</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see quasylab.sibilla.lang.pm.model.impl.RuleImpl
     * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getRule()
     * @generated
     */
    EClass RULE = eINSTANCE.getRule();

    /**
     * The meta object literal for the '<em><b>Guard</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference RULE__GUARD = eINSTANCE.getRule_Guard();

    /**
     * The meta object literal for the '<em><b>Pre</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference RULE__PRE = eINSTANCE.getRule_Pre();

    /**
     * The meta object literal for the '<em><b>Rate</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference RULE__RATE = eINSTANCE.getRule_Rate();

    /**
     * The meta object literal for the '<em><b>Post</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference RULE__POST = eINSTANCE.getRule_Post();

    /**
     * The meta object literal for the '{@link quasylab.sibilla.lang.pm.model.impl.PopulationImpl <em>Population</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see quasylab.sibilla.lang.pm.model.impl.PopulationImpl
     * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getPopulation()
     * @generated
     */
    EClass POPULATION = eINSTANCE.getPopulation();

    /**
     * The meta object literal for the '<em><b>Population</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference POPULATION__POPULATION = eINSTANCE.getPopulation_Population();

    /**
     * The meta object literal for the '{@link quasylab.sibilla.lang.pm.model.impl.MultiplicityImpl <em>Multiplicity</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see quasylab.sibilla.lang.pm.model.impl.MultiplicityImpl
     * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getMultiplicity()
     * @generated
     */
    EClass MULTIPLICITY = eINSTANCE.getMultiplicity();

    /**
     * The meta object literal for the '<em><b>Species</b></em>' reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference MULTIPLICITY__SPECIES = eINSTANCE.getMultiplicity_Species();

    /**
     * The meta object literal for the '<em><b>Size</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference MULTIPLICITY__SIZE = eINSTANCE.getMultiplicity_Size();

    /**
     * The meta object literal for the '{@link quasylab.sibilla.lang.pm.model.impl.ExpressionImpl <em>Expression</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see quasylab.sibilla.lang.pm.model.impl.ExpressionImpl
     * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getExpression()
     * @generated
     */
    EClass EXPRESSION = eINSTANCE.getExpression();

    /**
     * The meta object literal for the '{@link quasylab.sibilla.lang.pm.model.impl.RelationOperatorImpl <em>Relation Operator</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see quasylab.sibilla.lang.pm.model.impl.RelationOperatorImpl
     * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getRelationOperator()
     * @generated
     */
    EClass RELATION_OPERATOR = eINSTANCE.getRelationOperator();

    /**
     * The meta object literal for the '{@link quasylab.sibilla.lang.pm.model.impl.MulDivOperatorImpl <em>Mul Div Operator</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see quasylab.sibilla.lang.pm.model.impl.MulDivOperatorImpl
     * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getMulDivOperator()
     * @generated
     */
    EClass MUL_DIV_OPERATOR = eINSTANCE.getMulDivOperator();

    /**
     * The meta object literal for the '{@link quasylab.sibilla.lang.pm.model.impl.SumDiffOperatorImpl <em>Sum Diff Operator</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see quasylab.sibilla.lang.pm.model.impl.SumDiffOperatorImpl
     * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getSumDiffOperator()
     * @generated
     */
    EClass SUM_DIFF_OPERATOR = eINSTANCE.getSumDiffOperator();

    /**
     * The meta object literal for the '{@link quasylab.sibilla.lang.pm.model.impl.FractionOfImpl <em>Fraction Of</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see quasylab.sibilla.lang.pm.model.impl.FractionOfImpl
     * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getFractionOf()
     * @generated
     */
    EClass FRACTION_OF = eINSTANCE.getFractionOf();

    /**
     * The meta object literal for the '<em><b>Agent</b></em>' reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference FRACTION_OF__AGENT = eINSTANCE.getFractionOf_Agent();

    /**
     * The meta object literal for the '{@link quasylab.sibilla.lang.pm.model.impl.NumberOfImpl <em>Number Of</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see quasylab.sibilla.lang.pm.model.impl.NumberOfImpl
     * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getNumberOf()
     * @generated
     */
    EClass NUMBER_OF = eINSTANCE.getNumberOf();

    /**
     * The meta object literal for the '<em><b>Agent</b></em>' reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference NUMBER_OF__AGENT = eINSTANCE.getNumberOf_Agent();

    /**
     * The meta object literal for the '{@link quasylab.sibilla.lang.pm.model.impl.NumExpressionImpl <em>Num Expression</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see quasylab.sibilla.lang.pm.model.impl.NumExpressionImpl
     * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getNumExpression()
     * @generated
     */
    EClass NUM_EXPRESSION = eINSTANCE.getNumExpression();

    /**
     * The meta object literal for the '<em><b>Int Part</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute NUM_EXPRESSION__INT_PART = eINSTANCE.getNumExpression_IntPart();

    /**
     * The meta object literal for the '<em><b>Is Real</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute NUM_EXPRESSION__IS_REAL = eINSTANCE.getNumExpression_IsReal();

    /**
     * The meta object literal for the '<em><b>Decimal Part</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute NUM_EXPRESSION__DECIMAL_PART = eINSTANCE.getNumExpression_DecimalPart();

    /**
     * The meta object literal for the '<em><b>Exponent</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute NUM_EXPRESSION__EXPONENT = eINSTANCE.getNumExpression_Exponent();

    /**
     * The meta object literal for the '{@link quasylab.sibilla.lang.pm.model.impl.OrExpressionImpl <em>Or Expression</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see quasylab.sibilla.lang.pm.model.impl.OrExpressionImpl
     * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getOrExpression()
     * @generated
     */
    EClass OR_EXPRESSION = eINSTANCE.getOrExpression();

    /**
     * The meta object literal for the '<em><b>Left</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference OR_EXPRESSION__LEFT = eINSTANCE.getOrExpression_Left();

    /**
     * The meta object literal for the '<em><b>Right</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference OR_EXPRESSION__RIGHT = eINSTANCE.getOrExpression_Right();

    /**
     * The meta object literal for the '{@link quasylab.sibilla.lang.pm.model.impl.AndExpressionImpl <em>And Expression</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see quasylab.sibilla.lang.pm.model.impl.AndExpressionImpl
     * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getAndExpression()
     * @generated
     */
    EClass AND_EXPRESSION = eINSTANCE.getAndExpression();

    /**
     * The meta object literal for the '<em><b>Left</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference AND_EXPRESSION__LEFT = eINSTANCE.getAndExpression_Left();

    /**
     * The meta object literal for the '<em><b>Right</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference AND_EXPRESSION__RIGHT = eINSTANCE.getAndExpression_Right();

    /**
     * The meta object literal for the '{@link quasylab.sibilla.lang.pm.model.impl.RelationExpressionImpl <em>Relation Expression</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see quasylab.sibilla.lang.pm.model.impl.RelationExpressionImpl
     * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getRelationExpression()
     * @generated
     */
    EClass RELATION_EXPRESSION = eINSTANCE.getRelationExpression();

    /**
     * The meta object literal for the '<em><b>Left</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference RELATION_EXPRESSION__LEFT = eINSTANCE.getRelationExpression_Left();

    /**
     * The meta object literal for the '<em><b>Op</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference RELATION_EXPRESSION__OP = eINSTANCE.getRelationExpression_Op();

    /**
     * The meta object literal for the '<em><b>Right</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference RELATION_EXPRESSION__RIGHT = eINSTANCE.getRelationExpression_Right();

    /**
     * The meta object literal for the '{@link quasylab.sibilla.lang.pm.model.impl.LessOperatorImpl <em>Less Operator</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see quasylab.sibilla.lang.pm.model.impl.LessOperatorImpl
     * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getLessOperator()
     * @generated
     */
    EClass LESS_OPERATOR = eINSTANCE.getLessOperator();

    /**
     * The meta object literal for the '{@link quasylab.sibilla.lang.pm.model.impl.LessOrEqualOperatorImpl <em>Less Or Equal Operator</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see quasylab.sibilla.lang.pm.model.impl.LessOrEqualOperatorImpl
     * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getLessOrEqualOperator()
     * @generated
     */
    EClass LESS_OR_EQUAL_OPERATOR = eINSTANCE.getLessOrEqualOperator();

    /**
     * The meta object literal for the '{@link quasylab.sibilla.lang.pm.model.impl.EqualOperatorImpl <em>Equal Operator</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see quasylab.sibilla.lang.pm.model.impl.EqualOperatorImpl
     * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getEqualOperator()
     * @generated
     */
    EClass EQUAL_OPERATOR = eINSTANCE.getEqualOperator();

    /**
     * The meta object literal for the '{@link quasylab.sibilla.lang.pm.model.impl.DisEqualOperatorImpl <em>Dis Equal Operator</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see quasylab.sibilla.lang.pm.model.impl.DisEqualOperatorImpl
     * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getDisEqualOperator()
     * @generated
     */
    EClass DIS_EQUAL_OPERATOR = eINSTANCE.getDisEqualOperator();

    /**
     * The meta object literal for the '{@link quasylab.sibilla.lang.pm.model.impl.GreaterOperatorImpl <em>Greater Operator</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see quasylab.sibilla.lang.pm.model.impl.GreaterOperatorImpl
     * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getGreaterOperator()
     * @generated
     */
    EClass GREATER_OPERATOR = eINSTANCE.getGreaterOperator();

    /**
     * The meta object literal for the '{@link quasylab.sibilla.lang.pm.model.impl.GreaterOrEqualOperatorImpl <em>Greater Or Equal Operator</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see quasylab.sibilla.lang.pm.model.impl.GreaterOrEqualOperatorImpl
     * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getGreaterOrEqualOperator()
     * @generated
     */
    EClass GREATER_OR_EQUAL_OPERATOR = eINSTANCE.getGreaterOrEqualOperator();

    /**
     * The meta object literal for the '{@link quasylab.sibilla.lang.pm.model.impl.MulDivExpressionImpl <em>Mul Div Expression</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see quasylab.sibilla.lang.pm.model.impl.MulDivExpressionImpl
     * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getMulDivExpression()
     * @generated
     */
    EClass MUL_DIV_EXPRESSION = eINSTANCE.getMulDivExpression();

    /**
     * The meta object literal for the '<em><b>Left</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference MUL_DIV_EXPRESSION__LEFT = eINSTANCE.getMulDivExpression_Left();

    /**
     * The meta object literal for the '<em><b>Op</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference MUL_DIV_EXPRESSION__OP = eINSTANCE.getMulDivExpression_Op();

    /**
     * The meta object literal for the '<em><b>Right</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference MUL_DIV_EXPRESSION__RIGHT = eINSTANCE.getMulDivExpression_Right();

    /**
     * The meta object literal for the '{@link quasylab.sibilla.lang.pm.model.impl.MultiplicationOperatorImpl <em>Multiplication Operator</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see quasylab.sibilla.lang.pm.model.impl.MultiplicationOperatorImpl
     * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getMultiplicationOperator()
     * @generated
     */
    EClass MULTIPLICATION_OPERATOR = eINSTANCE.getMultiplicationOperator();

    /**
     * The meta object literal for the '{@link quasylab.sibilla.lang.pm.model.impl.DivisionOperatorImpl <em>Division Operator</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see quasylab.sibilla.lang.pm.model.impl.DivisionOperatorImpl
     * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getDivisionOperator()
     * @generated
     */
    EClass DIVISION_OPERATOR = eINSTANCE.getDivisionOperator();

    /**
     * The meta object literal for the '{@link quasylab.sibilla.lang.pm.model.impl.ZeroDivisionOperatorImpl <em>Zero Division Operator</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see quasylab.sibilla.lang.pm.model.impl.ZeroDivisionOperatorImpl
     * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getZeroDivisionOperator()
     * @generated
     */
    EClass ZERO_DIVISION_OPERATOR = eINSTANCE.getZeroDivisionOperator();

    /**
     * The meta object literal for the '{@link quasylab.sibilla.lang.pm.model.impl.SumDiffExpressionImpl <em>Sum Diff Expression</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see quasylab.sibilla.lang.pm.model.impl.SumDiffExpressionImpl
     * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getSumDiffExpression()
     * @generated
     */
    EClass SUM_DIFF_EXPRESSION = eINSTANCE.getSumDiffExpression();

    /**
     * The meta object literal for the '<em><b>Left</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference SUM_DIFF_EXPRESSION__LEFT = eINSTANCE.getSumDiffExpression_Left();

    /**
     * The meta object literal for the '<em><b>Op</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference SUM_DIFF_EXPRESSION__OP = eINSTANCE.getSumDiffExpression_Op();

    /**
     * The meta object literal for the '<em><b>Right</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference SUM_DIFF_EXPRESSION__RIGHT = eINSTANCE.getSumDiffExpression_Right();

    /**
     * The meta object literal for the '{@link quasylab.sibilla.lang.pm.model.impl.SumOperatorImpl <em>Sum Operator</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see quasylab.sibilla.lang.pm.model.impl.SumOperatorImpl
     * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getSumOperator()
     * @generated
     */
    EClass SUM_OPERATOR = eINSTANCE.getSumOperator();

    /**
     * The meta object literal for the '{@link quasylab.sibilla.lang.pm.model.impl.DifferenceOperatorImpl <em>Difference Operator</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see quasylab.sibilla.lang.pm.model.impl.DifferenceOperatorImpl
     * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getDifferenceOperator()
     * @generated
     */
    EClass DIFFERENCE_OPERATOR = eINSTANCE.getDifferenceOperator();

    /**
     * The meta object literal for the '{@link quasylab.sibilla.lang.pm.model.impl.ModuloExpressionImpl <em>Modulo Expression</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see quasylab.sibilla.lang.pm.model.impl.ModuloExpressionImpl
     * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getModuloExpression()
     * @generated
     */
    EClass MODULO_EXPRESSION = eINSTANCE.getModuloExpression();

    /**
     * The meta object literal for the '<em><b>Left</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference MODULO_EXPRESSION__LEFT = eINSTANCE.getModuloExpression_Left();

    /**
     * The meta object literal for the '<em><b>Right</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference MODULO_EXPRESSION__RIGHT = eINSTANCE.getModuloExpression_Right();

    /**
     * The meta object literal for the '{@link quasylab.sibilla.lang.pm.model.impl.TrueLiteralImpl <em>True Literal</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see quasylab.sibilla.lang.pm.model.impl.TrueLiteralImpl
     * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getTrueLiteral()
     * @generated
     */
    EClass TRUE_LITERAL = eINSTANCE.getTrueLiteral();

    /**
     * The meta object literal for the '{@link quasylab.sibilla.lang.pm.model.impl.FalseLiteralImpl <em>False Literal</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see quasylab.sibilla.lang.pm.model.impl.FalseLiteralImpl
     * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getFalseLiteral()
     * @generated
     */
    EClass FALSE_LITERAL = eINSTANCE.getFalseLiteral();

    /**
     * The meta object literal for the '{@link quasylab.sibilla.lang.pm.model.impl.NotExpressionImpl <em>Not Expression</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see quasylab.sibilla.lang.pm.model.impl.NotExpressionImpl
     * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getNotExpression()
     * @generated
     */
    EClass NOT_EXPRESSION = eINSTANCE.getNotExpression();

    /**
     * The meta object literal for the '<em><b>Argument</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference NOT_EXPRESSION__ARGUMENT = eINSTANCE.getNotExpression_Argument();

    /**
     * The meta object literal for the '{@link quasylab.sibilla.lang.pm.model.impl.NegationExpressionImpl <em>Negation Expression</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see quasylab.sibilla.lang.pm.model.impl.NegationExpressionImpl
     * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getNegationExpression()
     * @generated
     */
    EClass NEGATION_EXPRESSION = eINSTANCE.getNegationExpression();

    /**
     * The meta object literal for the '<em><b>Argument</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference NEGATION_EXPRESSION__ARGUMENT = eINSTANCE.getNegationExpression_Argument();

    /**
     * The meta object literal for the '{@link quasylab.sibilla.lang.pm.model.impl.CallExpressionImpl <em>Call Expression</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see quasylab.sibilla.lang.pm.model.impl.CallExpressionImpl
     * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getCallExpression()
     * @generated
     */
    EClass CALL_EXPRESSION = eINSTANCE.getCallExpression();

    /**
     * The meta object literal for the '<em><b>Symbol</b></em>' reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference CALL_EXPRESSION__SYMBOL = eINSTANCE.getCallExpression_Symbol();

    /**
     * The meta object literal for the '{@link quasylab.sibilla.lang.pm.model.impl.MinExpressionImpl <em>Min Expression</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see quasylab.sibilla.lang.pm.model.impl.MinExpressionImpl
     * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getMinExpression()
     * @generated
     */
    EClass MIN_EXPRESSION = eINSTANCE.getMinExpression();

    /**
     * The meta object literal for the '<em><b>Args</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference MIN_EXPRESSION__ARGS = eINSTANCE.getMinExpression_Args();

    /**
     * The meta object literal for the '{@link quasylab.sibilla.lang.pm.model.impl.MaxExpressionImpl <em>Max Expression</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see quasylab.sibilla.lang.pm.model.impl.MaxExpressionImpl
     * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getMaxExpression()
     * @generated
     */
    EClass MAX_EXPRESSION = eINSTANCE.getMaxExpression();

    /**
     * The meta object literal for the '<em><b>Args</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference MAX_EXPRESSION__ARGS = eINSTANCE.getMaxExpression_Args();

    /**
     * The meta object literal for the '{@link quasylab.sibilla.lang.pm.model.impl.IfThenElseExpressionImpl <em>If Then Else Expression</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see quasylab.sibilla.lang.pm.model.impl.IfThenElseExpressionImpl
     * @see quasylab.sibilla.lang.pm.model.impl.ModelPackageImpl#getIfThenElseExpression()
     * @generated
     */
    EClass IF_THEN_ELSE_EXPRESSION = eINSTANCE.getIfThenElseExpression();

    /**
     * The meta object literal for the '<em><b>Guard</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference IF_THEN_ELSE_EXPRESSION__GUARD = eINSTANCE.getIfThenElseExpression_Guard();

    /**
     * The meta object literal for the '<em><b>If Branch</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference IF_THEN_ELSE_EXPRESSION__IF_BRANCH = eINSTANCE.getIfThenElseExpression_IfBranch();

    /**
     * The meta object literal for the '<em><b>Else Branch</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference IF_THEN_ELSE_EXPRESSION__ELSE_BRANCH = eINSTANCE.getIfThenElseExpression_ElseBranch();

  }

} //ModelPackage
